#+TITLE: Lucas's Phenology LabBook
#+AUTHOR: Lucas Mello Schnorr
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

This file refers to the study of phenology.

* 2016-02-23 Validation of gray/black pixels outside of palette's limits

Bruno questionned me about the validity of gray and black pixels. His
concerns rely on the correct interpretation of the images. The idea is
as follows:

- Pixels where Green Average (GA) is below the LOW threshold are gray.
- Pixels where GA is higher than the HIGH threshold are black.
- Remaining pixels where GA is between LOW and HIGH threshold are
  colored according to the quantity of colors in the palette.

So, to try out, I have cropped a large drone image to contain only a
small section of 1024 by 1024 pixels. Then, I have executed, using
this image, the following commands:

#+begin_src sh :results output :session :exports both
# convert to GA images
for i in 33 34 35 36 37 38; do
  ./pga_tiff_palette ./pequeno_entrada_v2_crop.tif ../palette/example.palette 33 $i output_33_${i}.tif;
  ./pga_tiff_palette ./pequeno_entrada_v2_crop.tif ../palette/example.palette $i 38 output_${i}_38.tif;
done
# convert to compressed JPG images
for i in `ls output_*`; do
  convert $i `basename $i .tif`.jpg;
done
# add information about the LOW and HIGH threshold in the images
for i in `ls -1 output_??_??.jpg`; do
  TEXT=`echo $i | cut -d"_" -f2-3 | cut -d"." -f1`;
  convert -fill blue -draw "scale 50,50 text 2,10 '$TEXT'" $i `basename $i .jpg`_text.jpg ;
done
# create the GIF animations
convert -resize 1024x1024 -delay 1/3 \
    output_33_38_text.jpg \
    output_33_37_text.jpg \
    output_33_36_text.jpg \
    output_33_35_text.jpg \
    output_33_34_text.jpg \
    output_33_33_text.jpg \
    output_33_XX.gif

convert -resize 1024x1024 -delay 1/3 \
    output_*_38_text.jpg \
    output_XX_38.gif
#+end_src

Resulting images are here:

https://www.dropbox.com/sh/15rztbpcknrbk8k/AADex-BwFphD7UpuV9Prf6K_a/2016-02-23_Test_Gray_Black_Limits

Resulting GIF animations are here:

https://www.dropbox.com/sh/15rztbpcknrbk8k/AABVV3GkT8idTNR4s9_dwnbFa/2016-02-23_Test_Gray_Black_Limits/GIF?dl=0

In my opinion, the way it is done right now is correct.
* 2016-09-13 Create CPM for =dc_TKY_btp_n=
** Mask creation
I've created a mask with =gimp= and stored it in the following
folder. The mask has been created with gimp. Black areas are not
considered when masking, as the file:README.org indicates.
#+begin_src sh :results output
ls -lh ~/svn/phenology/dc_TKY_btp_n/mask.jpg
#+end_src

#+RESULTS:
: -rw-r--r-- 1 schnorr schnorr 51K Sep 13 14:21 /home/schnorr/svn/phenology/dc_TKY_btp_n/mask.jpg
** Calculating the histograms for all images
Looks like the file:./scripts/pga_csv is not working correctly. It
stills execute and call =pga_hist= correctly with the good mask, but the
CSV generated in the standard output is wrong. Here's a customized
script for this data set.

#+begin_src sh :results output
DIRWITHIMAGES=~/svn/phenology/dc_TKY_btp_n/
for file in $(find ${DIRWITHIMAGES} | grep "jpg$" | sort); do
  echo $file
done | head
#+end_src

#+RESULTS:
#+begin_example
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_100_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_101_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_102_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_103_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_104_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_105_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_106_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_107_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_108_1203+0900_TKY__btp_n.jpg
/home/schnorr/svn/phenology/dc_TKY_btp_n/dc_2005_109_1203+0900_TKY__btp_n.jpg
#+end_example

So, it looks like the *year* is the second field, while the *sequence* is
the third one of the base filename. So, let's consider that.

#+begin_src sh :results output
MASK=~/svn/phenology/dc_TKY_btp_n/mask.jpg
GRAIN=20
DIRWITHIMAGES=~/svn/phenology/dc_TKY_btp_n/
for file in $(find ${DIRWITHIMAGES} | grep "jpg$" | sort); do
   FILE=`basename $file .jpg`
   YEAR=`echo $FILE | cut -d"_" -f2`
   SEQUENCE=`echo $FILE | cut -d"_" -f3`
   echo "$SEQUENCE,$YEAR,`./b/pga_hist $file $MASK $GRAIN`";
done | head
#+end_src

#+RESULTS:
#+begin_example
100,2005,0,0,0,0,0,198,2649782,712377,57830,1597,25,0,0,0,0,0,0,0,0,0
101,2005,0,0,0,0,0,335,2618647,763818,38778,231,0,0,0,0,0,0,0,0,0,0
102,2005,0,0,0,0,0,2,3366166,55641,0,0,0,0,0,0,0,0,0,0,0,0
103,2005,0,0,0,0,0,415,2621272,758190,41661,271,0,0,0,0,0,0,0,0,0,0
104,2005,0,0,0,0,0,1036,2445733,856557,110928,6917,562,64,12,0,0,0,0,0,0,0
105,2005,0,0,0,0,0,816,2448674,852383,114970,4730,217,18,1,0,0,0,0,0,0,0
106,2005,0,0,0,0,0,18,2656676,734337,30707,71,0,0,0,0,0,0,0,0,0,0
107,2005,0,0,0,0,0,327,2426587,874102,116417,4208,165,3,0,0,0,0,0,0,0,0
108,2005,0,0,0,0,0,125,2476115,836275,107405,1869,20,0,0,0,0,0,0,0,0,0
109,2005,0,0,0,0,0,132,2524490,824063,72277,842,5,0,0,0,0,0,0,0,0,0
#+end_example

Great, it has worked. Now, let's put all this in a file. I'll execute
in a terminal so I can edit this file. Here's exactly what I've
executed in the terminal (copy paste entirely after customizing
paths):

#+BEGIN_EXAMPLE
DATABASE=dc_TKY_btp_n
MASK=~/svn/phenology/dc_TKY_btp_n/mask.jpg
GRAIN=20
DIRWITHIMAGES=~/svn/phenology/dc_TKY_btp_n/
PGA_HIST_LOCATION=./b/pga_hist

{
#
# Generate CSV header
#
FINAL=`echo $GRAIN - 1 | bc`
echo -n "database,sequence,year,"
for j in `seq 0 $FINAL`; do echo -n "X$j,"; done | sed "s/,$//"
echo ""

#
# Call pga_hist for each file, aplying the $MASK
#
for file in $(find ${DIRWITHIMAGES} | grep "jpg$" | grep -v mask | sort); do
   FILE=`basename $file .jpg`
   YEAR=`echo $FILE | cut -d"_" -f2`
   SEQUENCE=`echo $FILE | cut -d"_" -f3`
   echo "$DATABASE,$SEQUENCE,$YEAR,`${PGA_HIST_LOCATION} $file $MASK $GRAIN`";
done
} > dc_TKY_btp_n_grain20_masked.csv
#+END_EXAMPLE

I've commited the =dc_TKY_btp_n_grain20_masked.csv= in the experiments directory.

Let's run the same code with 100 as GRAIN (to obtain a 100-bucket histogram).

#+BEGIN_EXAMPLE
DATABASE=dc_TKY_btp_n
MASK=~/svn/phenology/dc_TKY_btp_n/mask.jpg
GRAIN=100
DIRWITHIMAGES=~/svn/phenology/dc_TKY_btp_n/
PGA_HIST_LOCATION=./b/pga_hist

{
#
# Generate CSV header
#
FINAL=`echo $GRAIN - 1 | bc`
echo -n "database,sequence,year,"
for j in `seq 0 $FINAL`; do echo -n "X$j,"; done | sed "s/,$//"
echo ""

#
# Call pga_hist for each file, aplying the $MASK
#
for file in $(find ${DIRWITHIMAGES} | grep "jpg$" | grep -v mask | sort); do
   FILE=`basename $file .jpg`
   YEAR=`echo $FILE | cut -d"_" -f2`
   SEQUENCE=`echo $FILE | cut -d"_" -f3`
   echo "$DATABASE,$SEQUENCE,$YEAR,`${PGA_HIST_LOCATION} $file $MASK $GRAIN`";
done
} > dc_TKY_btp_n_grain100_masked.csv
#+END_EXAMPLE

100 buckets should sufficient since we can get the GA betweem 30% and
40%, with a resolution of 0.5%.

#+begin_src sh :results output
ls -lh experiments
#+end_src

#+RESULTS:
: total 1.4M
: -rw-r--r-- 1 schnorr schnorr 1.1M Sep 13 16:17 dc_TKY_btp_n_grain100_masked.csv
: -rw-r--r-- 1 schnorr schnorr 309K Sep 13 14:38 dc_TKY_btp_n_grain20_masked.csv
** Creating the CPM
Reading the palette
#+begin_src R :results output :session :exports both
paletteFilename = "palette/example.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
palette
#+end_src

#+RESULTS:
:  [1] "#99540F" "#B26F2C" "#CC8E51" "#E5B17E" "#FFD8B2" "#6B990F" "#85B22C"
:  [8] "#A3CC51" "#C3E57E" "#E5FFB2" "#0F6B99" "#2C85B2" "#51A3CC" "#7EC3E5"
: [15] "#B2E5FF" "#260F99" "#422CB2" "#6551CC" "#8F7EE5" "#BFB2FF"

Read the CSV
#+begin_src R :results output :session :exports both
library(reshape);
df <- read.csv("experiments/dc_TKY_btp_n_grain100_masked.csv");
dfm <- melt(df, id.vars=c("database", "sequence", "year"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
head(dfm);
#+end_src

#+RESULTS:
:       database sequence year variable value
: 1 dc_TKY_btp_n      100 2005        0     0
: 2 dc_TKY_btp_n      101 2005        0     0
: 3 dc_TKY_btp_n      102 2005        0     0
: 4 dc_TKY_btp_n      103 2005        0     0
: 5 dc_TKY_btp_n      104 2005        0     0
: 6 dc_TKY_btp_n      105 2005        0     0

Let's do the plot

#+begin_src R :results output graphics :file img/cpm.jpg :exports both :width 1200 :height 800 :session
lowLimit = 30;
highLimit = 50;
library(ggplot2);
ggplot(dfm[dfm$variable >= lowLimit & 
            dfm$variable < highLimit &
            dfm$value != 0,],
       aes(x = sequence, y = value, fill=as.factor(variable))) +
       geom_bar(stat='identity', width=1) +
       ylim(0,NA) +
       theme_bw() +
       scale_fill_manual(values=palette) +
       theme(legend.position="none") +
       facet_wrap(~year);
#+end_src

#+RESULTS:
[[file:img/cpm.jpg]]

* 2016-09-13 CSV created by Comba
** With 2015.csv file sent by Comba
#+begin_src R :results output :session :exports both
df <- read.csv("~/Downloads/2015.csv");
dfm <- melt(df, id.vars=c("sequence", "year"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
head(dfm);
#+end_src

#+RESULTS:
:   sequence year variable value
: 1        1 2015        0  4246
: 2        2 2015        0  5392
: 3        3 2015        0  5472
: 4        4 2015        0  5496
: 5        5 2015        0  5047
: 6        6 2015        0  2944


#+begin_src R :results output graphics :file img/comba_2015_cpm.jpg :exports both :width 1200 :height 800 :session
lowLimit = 30;
highLimit = 50;
library(ggplot2);
ggplot(dfm[dfm$variable >= lowLimit & 
            dfm$variable < highLimit &
            dfm$value != 0,], # & dfm$value > 2e+,],
       aes(x = sequence, y = value, fill=as.factor(variable))) +
       geom_bar(stat='identity', width=1) +
       ylim(0,NA) +
       theme_bw() +
       scale_fill_manual(values=palette) +
       theme(legend.position="none") +
       facet_wrap(~year);
#+end_src

#+RESULTS:
[[file:img/comba_2015_cpm.jpg]]
** Trying to reproduce
Problem: histograms are not normalized

The problem was that the mask wasn't in the RGB mode. As already noted
in the file:README.org file, mask and images should be in RGB mode
since it is the only way we know how to read JPG images for now. The
histograms were not normalized because the reading of the mask failed,
causing the rest (masking, histogram calculation) to be wrong.

#+BEGIN_EXAMPLE
DATABASE=dc_TKY_y18_d
MASK=~/svn/phenology/dc_TKY_y18_d/mask1.jpeg
GRAIN=100
DIRWITHIMAGES=~/svn/phenology/dc_TKY_y18_d/
PGA_HIST_LOCATION=./b/pga_hist

{
#
# Generate CSV header
#
FINAL=`echo $GRAIN - 1 | bc`
echo -n "database,sequence,year,"
for j in `seq 0 $FINAL`; do echo -n "X$j,"; done | sed "s/,$//"
echo ""

#
# Call pga_hist for each file, aplying the $MASK
#
for file in $(find ${DIRWITHIMAGES} | grep "jpg$" | grep 2015 | grep -v mask | sort); do
   FILE=`basename $file .jpg`
   YEAR=`echo $FILE | cut -d"_" -f2`
   SEQUENCE=`echo $FILE | cut -d"_" -f3`
   echo "$DATABASE,$SEQUENCE,$YEAR,`${PGA_HIST_LOCATION} $file $MASK $GRAIN`";
done
} > dc_TKY_y18_n_2015_grain100_masked.csv
#+END_EXAMPLE
** Creating the CPM again
#+begin_src R :results output :session :exports both
library(reshape);
df <- read.csv("dc_TKY_y18_n_2015_grain100_masked.csv");
dfm <- melt(df, id.vars=c("database", "sequence", "year"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
head(dfm);
#+end_src

#+RESULTS:
:       database sequence year variable value
: 1 dc_TKY_y18_d        1 2015        0     0
: 2 dc_TKY_y18_d        2 2015        0     0
: 3 dc_TKY_y18_d        3 2015        0     0
: 4 dc_TKY_y18_d        4 2015        0     0
: 5 dc_TKY_y18_d        5 2015        0     0
: 6 dc_TKY_y18_d        6 2015        0     0

#+begin_src R :results output graphics :file  img/comba_2015_cpm_redo.jpg :exports both :width 1200 :height 800 :session
lowLimit = 30;
highLimit = 50;
library(ggplot2);
ggplot(dfm[dfm$variable >= lowLimit & 
            dfm$variable < highLimit &
            dfm$value != 0,], # & dfm$variable != 33,],
       aes(x = sequence, y = value, fill=as.factor(variable))) +
       geom_bar(stat='identity', width=1) +
       ylim(0,NA) +
       theme_bw() +
       scale_fill_manual(values=palette) +
       theme(legend.position="none") +
       facet_wrap(~year);
#+end_src

#+RESULTS:
[[file:img/comba_2015_cpm_redo.jpg]]
** Identify the problem
Count the number of pixels:
#+begin_src sh :results output
for line in `cat dc_TKY_y18_n_2015_grain100_masked.csv | grep -v database | cut -d, -f4-`
do
  echo $line | sed "s/,/+/g" | bc -l
done | cat -n > x.csv
#+end_src

#+RESULTS:

#+begin_src R :results output :session :exports both
head(df);
#+end_src

#+RESULTS:
:   V1      V2
: 1  1 2966555
: 2  2 2005224
: 3  3 1990250
: 4  4 2024096
: 5  5 2108453
: 6  6 2987872

#+begin_src R :results output graphics :file img/verif_number_of_pixels.png :exports both :width 600 :height 400 :session
df <- read.csv("x.csv", head=F, sep="\t");
ggplot(df, aes(x=V1, y=V2)) + geom_point() + ylim(0,NA) + theme_bw();
#+end_src

#+RESULTS:
[[file:img/verif_number_of_pixels.png]]

The number of pixels is indeed different. I should check the reason in =pga_hist=.
** Problem is fixed, here's the results
Count the number of pixels:
#+begin_src sh :results output
for line in `cat dc_TKY_y18_n_2015_grain100_masked.csv | grep -v database | cut -d, -f4-`
do
  echo $line | sed "s/,/+/g" | bc -l
done | cat -n > x.csv
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :file img/verif_number_of_pixels_after_fix.png :exports both :width 600 :height 400 :session
library(ggplot2);
df <- read.csv("x.csv", head=F, sep="\t");
ggplot(df, aes(x=V1, y=V2)) + geom_point() + ylim(0,NA) + theme_bw();
#+end_src

#+RESULTS:
[[file:img/verif_number_of_pixels_after_fix.png]]

The number of pixels is the same.
* 2016-09-14 One plot for all years
** Transform day of the year + year in a R date type
Each day image is tagged with the year combined with the day of the
year. To read such information into a proper date type in R I do as
follows:
#+begin_src R :results output :session :exports both
as.Date('2016.258', format="%Y.%j");
#+end_src

#+RESULTS:
: [1] "2016-09-14"

For further details, see:
- http://www.stat.berkeley.edu/classes/s133/dates.html
** CSV creation for the three databases
#+begin_src sh :results output
NGRAIN=100
PGA_HIST_LOCATION=./b/pga_hist
DIRWITHDATABASES=~/svn/phenology/

#
# Generate CSV header
#
{
FINAL=`echo $NGRAIN - 1 | bc`
echo -n "database,year,sequence,"
for j in `seq 0 $FINAL`; do echo -n "X$j,"; done | sed "s/,$//"
echo ""

for DATABASE in dc_TKY_btp_n dc_TKY_y18_d dc_TKY_y18bb; do
    MASK=${DIRWITHDATABASES}/${DATABASE}/mask.jpg
    for file in $(find ${DIRWITHDATABASES}/${DATABASE}/ | grep "jpg$" | grep -v mask | sort); do
	      FILE=`basename $file .jpg`
	      YEAR=`echo $FILE | cut -d"_" -f2`
	      SEQUENCE=`echo $FILE | cut -d"_" -f3`
	      echo "$DATABASE,$YEAR,$SEQUENCE,`${PGA_HIST_LOCATION} $file $MASK $NGRAIN`";
    done
done
} > experiments/dc_all_grain100_masked.csv
#+end_src
** Read, create DOY, plot everything
#+begin_src R :results output :session :exports both
library(reshape);
df <- read.csv("experiments/dc_all_grain100_masked.csv");
df$doy <- as.Date(paste(df$year, df$sequence),  format="%Y %j");
df$year <- NULL;
df$sequence <- NULL;
dfm <- melt(df, id.vars=c("database", "doy"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
head(dfm);
#+end_src

#+RESULTS:
:       database        doy variable value
: 1 dc_TKY_btp_n 2005-04-10        0     0
: 2 dc_TKY_btp_n 2005-04-11        0     0
: 3 dc_TKY_btp_n 2005-04-12        0     0
: 4 dc_TKY_btp_n 2005-04-13        0     0
: 5 dc_TKY_btp_n 2005-04-14        0     0
: 6 dc_TKY_btp_n 2005-04-15        0     0

Now plot it
#+begin_src R :results output graphics :file img/dc_all_grain100_masked.png :exports both :width 600 :height 400 :session
paletteFilename = "palette/example.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);

lowLimit = 30;
highLimit = 50;
library(ggplot2);
ggplot(dfm[dfm$variable >= lowLimit & 
            dfm$variable < highLimit &
            dfm$value != 0,],
       aes(x = doy, y = value, fill=as.factor(variable))) +
       geom_bar(stat='identity', width=1) +
       ylim(0,NA) +
       theme_bw() +
       scale_fill_manual(values=palette) +
       theme(legend.position="none") +
       facet_wrap(~database, ncol=1);
#+end_src

#+RESULTS:
[[file:img/dc_all_grain100_masked.png]]


Looks like we have a scale issue: the Y scale differs for each
database. That's normal because masks are different. I can free the Y
scale when facetting. That should fix and not undermine the
interpretation since everything is normalized anyway. So here's for
version 2. I also improve other aspects, tick labels, axis labels,
font size.

#+begin_src R :results output graphics :file img/dc_all_grain100_masked_v2.png :exports both :width 1200 :height 800 :session
paletteFilename = "palette/example.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);

lowLimit = 30;
highLimit = 50;
library(ggplot2);
ggplot(dfm[dfm$variable >= lowLimit & 
            dfm$variable < highLimit &
            dfm$value != 0,],
       aes(x = doy, y = value, fill=as.factor(variable))) +
       geom_bar(stat='identity', width=1) +
       ylim(0,NA) +
       ylab ("Green Average Histogram (per-facet, normalized)") +
       xlab ("Time (each day along the years)") +
       scale_x_date(date_breaks="1 year", date_labels="%Y") +
       theme_bw(base_size=22) +
       scale_fill_manual(values=palette) +
       theme(legend.position="none") +
       facet_wrap(~database, ncol=1, scale="free_y");
#+end_src

#+RESULTS:
[[file:img/dc_all_grain100_masked_v2.png]]

* 2016-09-28 Meeting with Comba and attempt with new palette
The problem is the lack of normalization because I discard data if
there is not enough colors to map to the values.

I just realized I can re-use the previously calculated data. They are
here:
#+begin_src sh :results output
head experiments/dc_all_grain100_masked.csv
#+end_src

#+RESULTS:
#+begin_example
database,year,sequence,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23,X24,X25,X26,X27,X28,X29,X30,X31,X32,X33,X34,X35,X36,X37,X38,X39,X40,X41,X42,X43,X44,X45,X46,X47,X48,X49,X50,X51,X52,X53,X54,X55,X56,X57,X58,X59,X60,X61,X62,X63,X64,X65,X66,X67,X68,X69,X70,X71,X72,X73,X74,X75,X76,X77,X78,X79,X80,X81,X82,X83,X84,X85,X86,X87,X88,X89,X90,X91,X92,X93,X94,X95,X96,X97,X98,X99
dc_TKY_btp_n,2005,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,188,3939,95294,766327,1284631,499591,276537,186994,121724,80301,46821,29435,14826,7739,3892,1938,918,408,156,82,33,16,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dc_TKY_btp_n,2005,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,326,8584,138093,835451,1169693,466826,284257,203629,138448,90150,47334,24171,9271,3508,1316,512,167,46,14,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dc_TKY_btp_n,2005,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,458,61731,1527881,1538384,237712,47153,7563,854,68,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dc_TKY_btp_n,2005,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,33,381,10727,180539,934053,1058607,437346,281169,199613,137916,90709,48783,25261,10217,4073,1553,557,195,64,8,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dc_TKY_btp_n,2005,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,31,59,228,707,8211,174174,923617,896089,443642,283054,222054,164345,113560,73544,51559,28908,16255,9176,5030,3097,1832,1076,627,285,286,126,81,44,25,17,17,15,11,4,3,2,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dc_TKY_btp_n,2005,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,37,126,641,5719,133844,907311,949266,452534,283706,217511,159970,114207,76989,54611,30281,16760,8610,4708,2427,1196,642,325,140,117,48,24,16,12,10,5,2,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dc_TKY_btp_n,2005,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,2482,90566,937508,1206032,420088,258408,195150,141634,93412,45733,20802,6900,2207,614,184,48,15,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dc_TKY_btp_n,2005,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,13,44,261,3846,111532,863809,985515,461885,286958,222757,165612,119132,79643,56030,31191,16527,8374,4295,2184,1103,522,267,132,95,40,21,5,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
dc_TKY_btp_n,2005,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,12,103,2325,90606,858745,1061053,463386,278986,205025,151662,116641,83961,56351,28355,13615,6328,2756,1112,488,177,64,28,15,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
#+end_example

Let's first read this in R:

#+begin_src R :results output :session :exports both
library(reshape);
df <- read.csv("experiments/dc_all_grain100_masked.csv");
df$doy <- as.Date(paste(df$year, df$sequence),  format="%Y %j");
df$sequence <- NULL;
dfm <- melt(df, id.vars=c("database", "year", "doy"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
head(dfm);
#+end_src

#+RESULTS:
:       database year        doy variable value
: 1 dc_TKY_btp_n 2005 2005-04-10        0     0
: 2 dc_TKY_btp_n 2005 2005-04-11        0     0
: 3 dc_TKY_btp_n 2005 2005-04-12        0     0
: 4 dc_TKY_btp_n 2005 2005-04-13        0     0
: 5 dc_TKY_btp_n 2005 2005-04-14        0     0
: 6 dc_TKY_btp_n 2005 2005-04-15        0     0

Great, let's do the plot. Configurations:
- use the ~viridis.palette~ sent by comba
- The low and hig limit should be 0 and 100 because now we have 100
  colors in the palette

Load the palette:
#+begin_src R :results output :session :exports both
paletteFilename = "palette/viridis.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
#+end_src

#+RESULTS:

Function to draw a year:

#+begin_src R :results output :session :exports both
library(ggplot2);

plot_year <- function (lowLimit, highLimit, database, year, palette)
{
    ggplot(dfm[dfm$database == database & dfm$year == year ,],
       aes(x = doy, y = value, fill=as.factor(variable))) +
       geom_bar(stat='identity', width=1) +
       ylim(0,NA) +
       theme_bw() +
#       ggtitle(paste(database, year, sep=" ")) +
       scale_fill_manual(values=palette) +
       theme(legend.position="none") +
       xlab(NULL) + ylab(NULL) +
       theme(axis.title.x=element_blank(),
                  axis.text=element_blank(),
                  axis.ticks=element_blank(),
                  panel.grid=element_blank(),
                  panel.border=element_blank());
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session :exports both
database = "dc_TKY_y18_d";
base = "img/"
for (year in 2004:2016) {
   png(paste(base, database, "_", year, ".png", sep=""), width = 1920, height = 1080);
   print(plot_year(0, 100, database, year, palette));
   dev.off();
   pdf(paste(base, database, "_", year, ".pdf", sep=""), width = 19.20, height = 10.80);
   print(plot_year(0, 100, database, year, palette));
   dev.off();
}
#+end_src

#+RESULTS:

PDF crop of everything

#+begin_src sh :results output
cd img
rm dc_TKY_y18_d_*-crop.pdf
for file in $(ls dc_TKY_y18_d_*.pdf); do
  pdfcrop $file
done
#+end_src

#+RESULTS:
#+begin_example
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2004-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2016-crop.pdf'.
#+end_example

* 2016-09-28 Analysis of ~dc_TKY_y18_d~ (two masks)
- wrong images
  - 2015,220 \to 2015,244
- masks
  - 2004,first \to 2013,69  (file:masks/dc_TKY_y18_d_mask_section_1.jpg)
  - 2013,86 \to 2016,239 (file:masks/dc_TKY_y18_d_mask_section_2.jpg)
** CSV creation for the this database (using the two masks)
#+begin_src sh :results output
NGRAIN=100
PGA_HIST_LOCATION=./b/pga_hist
DIRWITHDATABASES=~/svn/phenology/

#
# Generate CSV header
#
{
FINAL=`echo $NGRAIN - 1 | bc`
echo -n "database,year,sequence,metric,"
for j in `seq 0 $FINAL`; do echo -n "X$j,"; done | sed "s/,$//"
echo ""

for DATABASE in dc_TKY_y18_d; do
    MASK=./masks/dc_TKY_y18_d_mask_section_1.jpg
    for file in $(find ${DIRWITHDATABASES}/${DATABASE}/ | grep "jpg$" | grep -v mask | sort); do
	      FILE=`basename $file .jpg`
	      YEAR=`echo $FILE | cut -d"_" -f2`
	      SEQUENCE=`echo $FILE | cut -d"_" -f3`
         if [ "$YEAR" == "2013" ] && [ "$SEQUENCE" ==  "086" ]; then
            MASK=./masks/dc_TKY_y18_d_mask_section_2.jpg
         fi
	      echo "$DATABASE,$YEAR,$SEQUENCE,Red,`${PGA_HIST_LOCATION} -m RED -s $MASK -g $NGRAIN $file`";
	      echo "$DATABASE,$YEAR,$SEQUENCE,Green,`${PGA_HIST_LOCATION} -m GREEN -s $MASK -g $NGRAIN $file`";
	      echo "$DATABASE,$YEAR,$SEQUENCE,Blue,`${PGA_HIST_LOCATION} -m BLUE -s $MASK -g $NGRAIN $file`";
    done
done
} > experiments/dc_TKY_y18_d_with_two_masks_metrics.csv
#+end_src
** Reading ~experiments/dc_TKY_y18_d_with_two_masks_metrics.csv~
#+begin_src R :results output :session :exports both
library(reshape);
df <- read.csv("experiments/dc_TKY_y18_d_with_two_masks_metrics.csv");
df$doy <- as.Date(paste(df$year, df$sequence),  format="%Y %j");
dfm <- melt(df, id.vars=c("database", "year", "sequence", "metric", "doy"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
dfm <- dfm[!(dfm$year == 2015 & dfm$sequence >= 220 & dfm$sequence <= 244),];
nrow(dfm);
head(dfm);
tail(dfm);
#+end_src

#+RESULTS:
#+begin_example
[1] 1299000
      database year sequence metric        doy variable value
1 dc_TKY_y18_d 2004       89    Red 2004-03-29        0     0
2 dc_TKY_y18_d 2004       89  Green 2004-03-29        0     0
3 dc_TKY_y18_d 2004       89   Blue 2004-03-29        0     0
4 dc_TKY_y18_d 2004       90    Red 2004-03-30        0     0
5 dc_TKY_y18_d 2004       90  Green 2004-03-30        0     0
6 dc_TKY_y18_d 2004       90   Blue 2004-03-30        0     0
            database year sequence metric        doy variable value
1306495 dc_TKY_y18_d 2016      238    Red 2016-08-25       99     0
1306496 dc_TKY_y18_d 2016      238  Green 2016-08-25       99     0
1306497 dc_TKY_y18_d 2016      238   Blue 2016-08-25       99     0
1306498 dc_TKY_y18_d 2016      239    Red 2016-08-26       99     0
1306499 dc_TKY_y18_d 2016      239  Green 2016-08-26       99     0
1306500 dc_TKY_y18_d 2016      239   Blue 2016-08-26       99     0
#+end_example
** Plot
#+begin_src R :results output :session :exports both
paletteFilename = "palette/viridis.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
library(ggplot2);
plot_year <- function (lowLimit, highLimit, database, year, metric, palette)
{
    ggplot(dfm[dfm$database == database & dfm$year == year & dfm$metric == metric,],
       aes(x = doy, y = value, fill=as.factor(variable))) +
       geom_bar(stat='identity', width=1) +
       ylim(0,NA) +
       theme_bw() +
       scale_fill_manual(values=palette) +
       theme(legend.position="none") +
       xlab(NULL) + ylab(NULL) +
       theme(axis.title.x=element_blank(),
                  axis.text=element_blank(),
                  axis.ticks=element_blank(),
                  panel.grid=element_blank(),
                  panel.border=element_blank());
}

database = "dc_TKY_y18_d";
base = "img/"
for (metric in c("Red", "Green", "Blue")){
    for (year in 2004:2016) {
        png(paste(base, database, "_", metric, "_", year, ".png", sep=""), width = 1920, height = 1080);
        print(plot_year(0, 100, database, year, metric, palette));
        dev.off();
        pdf(paste(base, database, "_", metric, "_", year, ".pdf", sep=""), width = 19.20, height = 10.80);
        print(plot_year(0, 100, database, year, metric, palette));
        dev.off();
    }
}
#+end_src

#+RESULTS:
#+begin_example
[1] "img/dc_TKY_y18_d_Red_2009.png"
[1] "img/dc_TKY_y18_d_Red_2010.png"
[1] "img/dc_TKY_y18_d_Red_2011.png"
[1] "img/dc_TKY_y18_d_Red_2012.png"
[1] "img/dc_TKY_y18_d_Red_2013.png"
[1] "img/dc_TKY_y18_d_Red_2014.png"
[1] "img/dc_TKY_y18_d_Red_2015.png"
[1] "img/dc_TKY_y18_d_Red_2016.png"
[1] "img/dc_TKY_y18_d_Green_2004.png"
[1] "img/dc_TKY_y18_d_Green_2005.png"
[1] "img/dc_TKY_y18_d_Green_2006.png"
[1] "img/dc_TKY_y18_d_Green_2007.png"
[1] "img/dc_TKY_y18_d_Green_2008.png"
[1] "img/dc_TKY_y18_d_Green_2009.png"
[1] "img/dc_TKY_y18_d_Green_2010.png"
[1] "img/dc_TKY_y18_d_Green_2011.png"
[1] "img/dc_TKY_y18_d_Green_2012.png"
[1] "img/dc_TKY_y18_d_Green_2013.png"
[1] "img/dc_TKY_y18_d_Green_2014.png"
[1] "img/dc_TKY_y18_d_Green_2015.png"
[1] "img/dc_TKY_y18_d_Green_2016.png"
[1] "img/dc_TKY_y18_d_Blue_2004.png"
[1] "img/dc_TKY_y18_d_Blue_2005.png"
[1] "img/dc_TKY_y18_d_Blue_2006.png"
[1] "img/dc_TKY_y18_d_Blue_2007.png"
[1] "img/dc_TKY_y18_d_Blue_2008.png"
[1] "img/dc_TKY_y18_d_Blue_2009.png"
[1] "img/dc_TKY_y18_d_Blue_2010.png"
[1] "img/dc_TKY_y18_d_Blue_2011.png"
[1] "img/dc_TKY_y18_d_Blue_2012.png"
[1] "img/dc_TKY_y18_d_Blue_2013.png"
[1] "img/dc_TKY_y18_d_Blue_2014.png"
[1] "img/dc_TKY_y18_d_Blue_2015.png"
[1] "img/dc_TKY_y18_d_Blue_2016.png"
#+end_example
** Crop
#+begin_src sh :results output
cd img
rm dc_TKY_y18_d_*-crop.pdf
for file in $(ls dc_TKY_y18_d_*.pdf); do
  pdfcrop $file
done
#+end_src

#+RESULTS:
#+begin_example
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2004-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18_d_2016-crop.pdf'.
#+end_example

* 2016-09-28 Analysis of ~dc_TKY_btp_n~ and ~dc_TKY_y18bb~
** First analysis
- wrong images
  - 2010,231
- masks
  - 2005,first \to 2005,199 (mask1)
  - 2005,200 \to 2009,352 (mask2)
  - 2009,352 \to 2016,240 (mask3)
** Second analysis
- wrong images kept as in [[*First analysis][First analysis]], mask
  gets the whole image
** CSV creation for the this database (using the full mask)
#+begin_src sh :results output
NGRAIN=100
PGA_HIST_LOCATION=./b/pga_hist
DIRWITHDATABASES=~/svn/phenology/

#
# Generate CSV header
#
{
FINAL=`echo $NGRAIN - 1 | bc`
echo -n "database,year,sequence,metric,"
for j in `seq 0 $FINAL`; do echo -n "X$j,"; done | sed "s/,$//"
echo ""

for DATABASE in dc_TKY_btp_n dc_TKY_y18bb; do
    MASK=masks/dc_full_mask.jpg
    for file in $(find ${DIRWITHDATABASES}/${DATABASE}/ | grep "jpg$" | grep -v mask | sort); do
	      FILE=`basename $file .jpg`
	      YEAR=`echo $FILE | cut -d"_" -f2`
	      SEQUENCE=`echo $FILE | cut -d"_" -f3`
	      echo "$DATABASE,$YEAR,$SEQUENCE,Red,`${PGA_HIST_LOCATION} -m RED -s $MASK -g $NGRAIN $file`";
	      echo "$DATABASE,$YEAR,$SEQUENCE,Green,`${PGA_HIST_LOCATION} -m GREEN -s $MASK -g $NGRAIN $file`";
	      echo "$DATABASE,$YEAR,$SEQUENCE,Blue,`${PGA_HIST_LOCATION} -m BLUE -s $MASK -g $NGRAIN $file`";
    done
done
} > experiments/dc_TKY_btp_n_y18bb_metrics_v2.csv
#+end_src
** Read the data written in ~experiments/dc_TKY_btp_n_y18bb_metrics.csv~
#+begin_src R :results output :session :exports both
library(reshape);
df <- read.csv("experiments/dc_TKY_btp_n_y18bb_metrics.csv");
df$doy <- as.Date(paste(df$year, df$sequence),  format="%Y %j");
dfm <- melt(df, id.vars=c("database", "year", "sequence", "metric", "doy"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
dfm <- dfm[!(dfm$year == 2015 & dfm$sequence >= 220 & dfm$sequence <= 244),];
nrow(dfm);
head(dfm);
tail(dfm);
#+end_src

#+RESULTS:
#+begin_example
[1] 2259900
      database year sequence metric        doy variable value
1 dc_TKY_btp_n 2005      100    Red 2005-04-10        0     0
2 dc_TKY_btp_n 2005      100  Green 2005-04-10        0     0
3 dc_TKY_btp_n 2005      100   Blue 2005-04-10        0     0
4 dc_TKY_btp_n 2005      101    Red 2005-04-11        0     0
5 dc_TKY_btp_n 2005      101  Green 2005-04-11        0     0
6 dc_TKY_btp_n 2005      101   Blue 2005-04-11        0     0
            database year sequence metric        doy variable value
2274895 dc_TKY_y18bb 2016      238    Red 2016-08-25       99     0
2274896 dc_TKY_y18bb 2016      238  Green 2016-08-25       99    12
2274897 dc_TKY_y18bb 2016      238   Blue 2016-08-25       99     1
2274898 dc_TKY_y18bb 2016      239    Red 2016-08-26       99     0
2274899 dc_TKY_y18bb 2016      239  Green 2016-08-26       99    26
2274900 dc_TKY_y18bb 2016      239   Blue 2016-08-26       99     2
#+end_example

#+begin_src R :results output :session :exports both
summary(dfm[dfm$database == "dc_TKY_btp_n",]);
summary(dfm[dfm$database == "dc_TKY_y18bb",]);
#+end_src

#+RESULTS:
#+begin_example
         database           year         sequence          doy            
 dc_TKY_btp_n:389500   Min.   :2005   Min.   :  1.0   Min.   :2005-04-10  
 dc_TKY_y18bb:     0   1st Qu.:2008   1st Qu.:102.0   1st Qu.:2008-01-10  
                       Median :2010   Median :186.0   Median :2010-11-19  
                       Mean   :2010   Mean   :186.5   Mean   :2010-11-15  
                       3rd Qu.:2013   3rd Qu.:274.0   3rd Qu.:2013-08-29  
                       Max.   :2016   Max.   :366.0   Max.   :2016-08-27  
    variable         value        
 Min.   : 0.00   Min.   :      0  
 1st Qu.:24.75   1st Qu.:      0  
 Median :49.50   Median :      0  
 Mean   :49.50   Mean   :  38715  
 3rd Qu.:74.25   3rd Qu.:      0  
 Max.   :99.00   Max.   :2857704
         database           year         sequence          doy            
 dc_TKY_btp_n:     0   Min.   :2005   Min.   :  1.0   Min.   :2005-06-02  
 dc_TKY_y18bb:363800   1st Qu.:2008   1st Qu.: 89.0   1st Qu.:2008-05-18  
                       Median :2011   Median :177.0   Median :2011-04-19  
                       Mean   :2011   Mean   :179.9   Mean   :2011-03-29  
                       3rd Qu.:2014   3rd Qu.:271.0   3rd Qu.:2014-01-08  
                       Max.   :2016   Max.   :366.0   Max.   :2016-08-26  
    variable         value        
 Min.   : 0.00   Min.   :      0  
 1st Qu.:24.75   1st Qu.:      0  
 Median :49.50   Median :      1  
 Mean   :49.50   Mean   :  38715  
 3rd Qu.:74.25   3rd Qu.:    646  
 Max.   :99.00   Max.   :3668702
#+end_example

Both start at 2005.

** Plot
#+begin_src R :results output :session :exports both
library(ggplot2);

paletteFilename = "palette/viridis.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);

plot_year <- function (lowLimit, highLimit, database, year, metric, palette)
{
    ggplot(dfm[dfm$database == database & dfm$year == year & dfm$metric == metric,],
       aes(x = doy, y = value, fill=as.factor(variable))) +
       geom_bar(stat='identity', width=1) +
       ylim(0,NA) +
       theme_bw() +
       scale_fill_manual(values=palette) +
       theme(legend.position="none") +
       xlab(NULL) + ylab(NULL) +
       theme(axis.title.x=element_blank(),
                  axis.text=element_blank(),
                  axis.ticks=element_blank(),
                  panel.grid=element_blank(),
                  panel.border=element_blank());
}

base = "img/"
for (metric in c("Red", "Green", "Blue")){
    for (database in c("dc_TKY_y18bb", "dc_TKY_btp_n")){
        for (year in 2005:2016) {
            png(paste(base, database, "_", metric, "_", year, ".png", sep=""), width = 1920, height = 1080);
            print(plot_year(0, 100, database, year, metric, palette));
            dev.off();
            pdf(paste(base, database, "_", metric, "_", year, ".pdf", sep=""), width = 19.20, height = 10.80);
            print(plot_year(0, 100, database, year, metric, palette));
            dev.off();
        }
    }
}


#+end_src

#+RESULTS:

** Crop
#+begin_src sh :results output
cd img
rm dc_TKY_btp_n*-crop.pdf dc_TKY_y18bb*-crop.pdf
for file in $(ls dc_TKY_btp_n*.pdf dc_TKY_y18bb*.pdf); do
  pdfcrop $file
done
#+end_src

#+RESULTS:
#+begin_example
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_2016-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Blue_2016-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Green_2016-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_btp_n_Red_2016-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_2016-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Blue_2016-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Green_2016-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2005-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2006-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2007-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2008-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2009-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2010-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2011-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2012-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2013-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2014-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2015-crop.pdf'.
PDFCROP 1.38, 2012/11/02 - Copyright (c) 2002-2012 by Heiko Oberdiek.
==> 1 page written on `dc_TKY_y18bb_Red_2016-crop.pdf'.
#+end_example

** Plot using facets (channels versus time) to have a single PDF instead of too many
#+begin_src R :results output graphics :file img/dc_TKY_y18bb_3metrics.pdf :exports both :width 32.00 :height 40.00 :session
plot_three_metrics_sequence <- function (database)
{
    library(ggplot2);
    paletteFilename = "palette/viridis.palette";
    palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
    ggplot(dfm[dfm$database == database,],
           aes(x = sequence, y = value, fill=as.factor(variable))) +
        geom_bar(stat='identity', width=1) +
        ylim(0,NA) +
        theme_bw(base_size=22) +
        scale_fill_manual(values=palette) +
        theme(legend.position="none") +
        xlab(NULL) + ylab(NULL) +
        facet_grid (year~metric, scale="free") +
        theme(axis.title.x=element_blank(),
              axis.text=element_blank(),
              axis.ticks=element_blank(),
              panel.grid=element_blank());
}
plot_three_metrics_sequence ("dc_TKY_y18bb");
#+end_src

#+RESULTS:
[[file:img/dc_TKY_y18bb_3metrics.pdf]]

* 2016-09-29 Facet view for all databases
** Read function
#+begin_src R :results output :session :exports both
library(reshape);
df1 <- read.csv("experiments/dc_TKY_y18_d_with_two_masks_metrics.csv");
df1 <- df1[!(df1$year == 2015 & df1$sequence >= 220 & df1$sequence <= 244),];
df2 <- read.csv("experiments/dc_TKY_btp_n_y18bb_metrics.csv");
df2 <- df2[!(df2$year == 2010 & df2$sequence == 231),];
df <- rbind (df1, df2);
df$doy <- as.Date(paste(df$year, df$sequence),  format="%Y %j");
dfm <- melt(df, id.vars=c("database", "year", "sequence", "metric", "doy"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
head(dfm);
unique(dfm$database);
#+end_src

#+RESULTS:
:       database year sequence metric        doy variable value
: 1 dc_TKY_y18_d 2004       89    Red 2004-03-29        0     0
: 2 dc_TKY_y18_d 2004       89  Green 2004-03-29        0     0
: 3 dc_TKY_y18_d 2004       89   Blue 2004-03-29        0     0
: 4 dc_TKY_y18_d 2004       90    Red 2004-03-30        0     0
: 5 dc_TKY_y18_d 2004       90  Green 2004-03-30        0     0
: 6 dc_TKY_y18_d 2004       90   Blue 2004-03-30        0     0
: [1] dc_TKY_y18_d dc_TKY_btp_n dc_TKY_y18bb
: Levels: dc_TKY_y18_d dc_TKY_btp_n dc_TKY_y18bb
** Plot everything
#+begin_src R :results output :session :exports both
plot_three_metrics_sequence <- function (df, database)
{
    library(ggplot2);
    paletteFilename = "palette/viridis.palette";
    palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
    ggplot(df[df$database == database,],
           aes(x = sequence, y = value, fill=as.factor(variable))) +
        geom_bar(stat='identity', width=1) +
        ylim(0,NA) +
        theme_bw(base_size=24) +
        scale_fill_manual(values=palette) +
        theme(legend.position="none") +
        xlab(NULL) + ylab(NULL) +
        facet_grid (year~metric, scale="free") +
        theme(axis.title.x=element_blank(),
              axis.text=element_blank(),
              axis.ticks=element_blank(),
              panel.grid=element_blank());
}

base = "img/"
for (database in unique(dfm$database)){
        print(paste(base, database, ".pdf", sep=""));
        pdf(paste(base, database, ".pdf", sep=""), width = 32, height = 48);
        print(plot_three_metrics_sequence(dfm, database));
        dev.off();
}

#+end_src

#+RESULTS:
: [1] "img/dc_TKY_y18_d.pdf"
: [1] "img/dc_TKY_btp_n.pdf"
: [1] "img/dc_TKY_y18bb.pdf"

** Plot everything with previous palette (but 100 colors - black/beige)
#+begin_src R :results output :session :exports both
plot_three_metrics_sequence <- function (df, database)
{
    library(ggplot2);
    paletteFilename = "palette/example100.palette";
    palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
    ggplot(df[df$database == database,],
           aes(x = sequence, y = value, fill=as.factor(variable))) +
        geom_bar(stat='identity', width=1) +
        ylim(0,NA) +
        theme_bw(base_size=24) +
        scale_fill_manual(values=palette) +
        theme(legend.position="none") +
        xlab(NULL) + ylab(NULL) +
        facet_grid (year~metric, scale="free") +
        theme(axis.title.x=element_blank(),
              axis.text=element_blank(),
              axis.ticks=element_blank(),
              panel.grid=element_blank());
}

base = "img/"
for (database in unique(dfm$database)){
    name = paste(base, database, "_example100_palette", ".pdf", sep="");
    pdf(name, width = 32, height = 48);
    print(plot_three_metrics_sequence(dfm, database));
    dev.off();
}
#+end_src

#+RESULTS:
* 2016-10-11 Explosing histogram for Red/Blue channels
Comba noticed that Red/Blue channels explose.
I'll try to investigate why.
** Read
#+begin_src R :results output :session :exports both
library(reshape);
df1 <- read.csv("experiments/dc_TKY_y18_d_with_two_masks_metrics.csv");
df1 <- df1[!(df1$year == 2015 & df1$sequence >= 220 & df1$sequence <= 244),];
df2 <- read.csv("experiments/dc_TKY_btp_n_y18bb_metrics.csv");
df2 <- df2[!(df2$year == 2010 & df2$sequence == 231),];
df <- rbind (df1, df2);
df$doy <- as.Date(paste(df$year, df$sequence),  format="%Y %j");
dfm <- melt(df, id.vars=c("database", "year", "sequence", "metric", "doy"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
head(dfm);
unique(dfm$database);
#+end_src

#+RESULTS:
:       database year sequence metric        doy variable value
: 1 dc_TKY_y18_d 2004       89    Red 2004-03-29        0     0
: 2 dc_TKY_y18_d 2004       89  Green 2004-03-29        0     0
: 3 dc_TKY_y18_d 2004       89   Blue 2004-03-29        0     0
: 4 dc_TKY_y18_d 2004       90    Red 2004-03-30        0     0
: 5 dc_TKY_y18_d 2004       90  Green 2004-03-30        0     0
: 6 dc_TKY_y18_d 2004       90   Blue 2004-03-30        0     0
: [1] dc_TKY_y18_d dc_TKY_btp_n dc_TKY_y18bb
: Levels: dc_TKY_y18_d dc_TKY_btp_n dc_TKY_y18bb

#+begin_src R :results output :session :exports both
database = "dc_TKY_y18_d";
k <- dfm[dfm$database == database & dfm$year == 2012 & dfm$metric == "Blue",];
head(k);
#summary(k);
length(unique(k$sequence));
nrow(k)/100;
head(k[k$sequence == 10,]);
#+end_src

#+RESULTS:
#+begin_example
         database year sequence metric        doy variable value
8136 dc_TKY_y18_d 2012        1   Blue 2012-01-01        0     0
8139 dc_TKY_y18_d 2012        2   Blue 2012-01-02        0     0
8142 dc_TKY_y18_d 2012        3   Blue 2012-01-03        0     0
8145 dc_TKY_y18_d 2012        4   Blue 2012-01-04        0     0
8148 dc_TKY_y18_d 2012        5   Blue 2012-01-05        0     0
8151 dc_TKY_y18_d 2012        6   Blue 2012-01-06        0     0
[1] 338
[1] 338
           database year sequence metric        doy variable value
8163   dc_TKY_y18_d 2012       10   Blue 2012-01-10        0     0
43896  dc_TKY_y18_d 2012       10   Blue 2012-01-10        1     0
79629  dc_TKY_y18_d 2012       10   Blue 2012-01-10        2     0
115362 dc_TKY_y18_d 2012       10   Blue 2012-01-10        3     0
151095 dc_TKY_y18_d 2012       10   Blue 2012-01-10        4     0
186828 dc_TKY_y18_d 2012       10   Blue 2012-01-10        5     0
#+end_example

** Plot
Showing only green, blue, and red averages whose values (the number of
pixels) are greater than FILTER (FILTER is 10000) and smaller than
FILTER*10.
#+begin_src R :results output graphics :file img/understanding_blue_red_channels_artifact.png :exports both :width 1200 :height 400 :session
    library(ggplot2);
    FILTER=10000;
    database = "dc_TKY_y18_d";
    palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
    ggplot(dfm[dfm$database == database & dfm$year == 2012 & dfm$value > FILTER & dfm$value < FILTER*10,],
           aes(x = sequence, y = variable, fill=value)) + 
        geom_rect(aes(xmin=sequence, xmax=sequence+1, ymin=variable, ymax=variable+1)) +
        ylim(0,100) +
        theme_bw(base_size=16) +
        scale_fill_gradient2(mid="blue", high="red", name = "Value") + 
        theme(legend.position="top") +
        xlab(NULL) + ylab(NULL) +
        facet_grid (year~metric, scale="free") +
        theme(axis.title.x=element_blank(),
              axis.text.x=element_blank(),
              axis.ticks.x=element_blank(),
              panel.grid=element_blank());
#+end_src

#+RESULTS:
[[file:img/understanding_blue_red_channels_artifact.png]]

It becomes clear that the histogram for each channel is widely
different. For the *Blue* channel, for instance, the filled buckets are
certainly between these values:

#+begin_src R :results output :session :exports both
metric = "Blue";
k <- dfm[dfm$database == database & dfm$year == 2012 & dfm$value > FILTER & dfm$value < FILTER*10 & dfm$metric == metric,];
summary(k$variable);
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:    0.00   17.00   24.00   23.19   30.00   42.00

For the *Green* channel (the one we are more used to), the filled
buckets are roughly between these values (pretty much in the bucket
window we already know, from 30 to 50):

#+begin_src R :results output :session :exports both
metric = "Green";
k <- dfm[dfm$database == database & dfm$year == 2012 & dfm$value > FILTER & dfm$value < FILTER*10 & dfm$metric == metric,];
summary(k$variable);
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   28.00   36.00   43.00   42.65   49.00   64.00

Finally, for the *Red* channel, these are the most common buckets:

#+begin_src R :results output :session :exports both
metric = "Red";
k <- dfm[dfm$database == database & dfm$year == 2012 & dfm$value > FILTER & dfm$value < FILTER*10 & dfm$metric == metric,];
summary(k$variable);
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:    24.0    29.0    34.0    34.1    38.0    53.0

Much more similar to the green channel than the blue one.

For all these reasons, as Comba has noticed, we should select a
per-channel palette. I'd suggest to adapt the viridis palette (with 20
colors except the borders) as follows, per channel:

- Red: values between 29 and 49
- Green: values between ...

All this of course depend on FILTER. To be less ad-hoc, we should
consider the number of pixels on each image (after masking) and define
FILTER based on that number.

But what is the number of pixels after masking?

#+begin_src R :results output :session :exports both
metric = "Red";
k <- dfm[dfm$database == database & dfm$year == 2012 & dfm$metric == metric & dfm$sequence == 1,];
FILTERMIN = round(sum(k$value)*0.10); # min of 10% of the number of pixels
FILTERMAX= round(sum(k$value)*0.90); # max of 90% of the number of pixels
FILTERMIN
FILTERMAX
#+end_src

#+RESULTS:
: [1] 128893
: [1] 1160036

So, we should select only the buckets (from 0 to 100) that have values
within the range specified above. Let's plot again using this less
ad-hoc methodology.

#+begin_src R :results output graphics :file img/understanding_blue_red_channels_artifact_with-less-adhoc-filters.png :exports both :width 1200 :height 400 :session
    library(ggplot2);
    FILTER=10000;
    database = "dc_TKY_y18_d";
    palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
    ggplot(dfm[dfm$database == database & dfm$year == 2012 & dfm$value > FILTERMIN & dfm$value < FILTERMAX,],
           aes(x = sequence, y = variable, fill=value)) + 
        geom_rect(aes(xmin=sequence, xmax=sequence+1, ymin=variable, ymax=variable+1)) +
        ylim(0,100) +
        theme_bw(base_size=16) +
        scale_fill_gradient2(mid="blue", high="red", name = "Value") + 
        theme(legend.position="top") +
        xlab(NULL) + ylab(NULL) +
        facet_grid (year~metric, scale="free") +
        theme(axis.title.x=element_blank(),
              axis.text.x=element_blank(),
              axis.ticks.x=element_blank(),
              panel.grid=element_blank());
#+end_src

#+RESULTS:
[[file:img/understanding_blue_red_channels_artifact_with-less-adhoc-filters.png]]

Looks better, now, let's calculate the min and max buckets that should
be considered to specify the new per-channel pallette:

#+begin_src R :results output :session :exports both
metric = "Blue";
k <- dfm[dfm$database == database & dfm$year == 2012 & dfm$value > FILTERMIN & dfm$value < FILTERMAX & dfm$metric == metric,];
metric;
summary(k$variable);
metric = "Green";
k <- dfm[dfm$database == database & dfm$year == 2012 & dfm$value > FILTERMIN & dfm$value < FILTERMAX & dfm$metric == metric,];
metric;
summary(k$variable);
metric = "Red";
k <- dfm[dfm$database == database & dfm$year == 2012 & dfm$value > FILTERMIN & dfm$value < FILTERMAX & dfm$metric == metric,];
metric;
summary(k$variable);
#+end_src

#+RESULTS:
: [1] "Blue"
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   20.00   25.00   31.00   30.05   34.00   40.00
: [1] "Green"
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   31.00   33.00   35.00   36.58   41.00   46.00
: [1] "Red"
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   27.00   32.00   33.00   33.24   35.00   40.00

Great, now let's create the new palettes based on the 20 colors
already available in the viridis (except borders). Extract the 20
colors (put in the ~/tmp/20colors~ file):

#+begin_src sh :results output
cat palette/viridis.palette | grep fffacd | uniq > /tmp/before
cat palette/viridis.palette | grep -v -e ^? -e fffacd -e 00000 > /tmp/20colors
cat palette/viridis.palette | grep 00000 | uniq > /tmp/after
#+end_src

#+RESULTS:

#+begin_src shell :results output
{
    for i in $(seq 1 19); do
      cat /tmp/before
    done
    cat /tmp/20colors
    for i in $(seq 61); do
      cat /tmp/after
    done
} > palette/viridis-blue.palette

{
    for i in $(seq 1 30); do
      cat /tmp/before
    done
    cat /tmp/20colors
    for i in $(seq 50); do
      cat /tmp/after
    done
} > palette/viridis-green.palette

{
    for i in $(seq 1 23); do
      cat /tmp/before
    done
    cat /tmp/20colors
    for i in $(seq 57); do
      cat /tmp/after
    done
} > palette/viridis-red.palette
#+end_src

#+RESULTS:

* 2016-10-13 Facet view for all databases (considering per-channel palettes)
** Read function
#+begin_src R :results output :session :exports both
library(reshape);
df1 <- read.csv("experiments/dc_TKY_y18_d_with_two_masks_metrics.csv");
df1 <- df1[!(df1$year == 2015 & df1$sequence >= 220 & df1$sequence <= 244),];
df2 <- read.csv("experiments/dc_TKY_btp_n_y18bb_metrics.csv");
df2 <- df2[!(df2$year == 2010 & df2$sequence == 231),];
df <- rbind (df1, df2);
df$doy <- as.Date(paste(df$year, df$sequence),  format="%Y %j");
dfm <- melt(df, id.vars=c("database", "year", "sequence", "metric", "doy"));
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
head(dfm);
unique(dfm$database);
#+end_src

#+RESULTS:
:       database year sequence metric        doy variable value
: 1 dc_TKY_y18_d 2004       89    Red 2004-03-29        0     0
: 2 dc_TKY_y18_d 2004       89  Green 2004-03-29        0     0
: 3 dc_TKY_y18_d 2004       89   Blue 2004-03-29        0     0
: 4 dc_TKY_y18_d 2004       90    Red 2004-03-30        0     0
: 5 dc_TKY_y18_d 2004       90  Green 2004-03-30        0     0
: 6 dc_TKY_y18_d 2004       90   Blue 2004-03-30        0     0
: [1] dc_TKY_y18_d dc_TKY_btp_n dc_TKY_y18bb
: Levels: dc_TKY_y18_d dc_TKY_btp_n dc_TKY_y18bb
** Plot everything
#+begin_src R :results output :session :exports both
plot_three_metrics_sequence <- function (df, database, metric)
{
    library(ggplot2);
    paletteFilename = paste("palette/viridis-", tolower(metric), ".palette", sep="");
    palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
    ggplot(df[df$database == database & df$metric == metric,],
           aes(x = sequence, y = value, fill=as.factor(variable))) +
        geom_bar(stat='identity', width=1) +
        ylim(0,NA) +
        theme_bw(base_size=24) +
        scale_fill_manual(values=palette) +
        theme(legend.position="none") +
        xlab(NULL) + ylab(NULL) +
        facet_grid (year~metric, scale="free") +
        theme(axis.title.x=element_blank(),
              axis.text=element_blank(),
              axis.ticks=element_blank(),
              panel.grid=element_blank());
}

base = "img/"
for (metric in unique(dfm$metric)){
    for (database in unique(dfm$database)){
        name = paste(database, metric, sep="_");
        name = paste(base, name, ".pdf", sep="");
        pdf(name, width = 32, height = 48);
        print(plot_three_metrics_sequence(dfm, database, metric));
        dev.off();
    }
}

#+end_src

#+RESULTS:
* 2016-10-13 Attempt to manually adapt the viridis palette (for the blue channel)
** Read
See how to load data in the previous entry:
- [[*2016-10-13 Facet view for all databases (considering per-channel palettes)][2016-10-13 Facet view for all databases (considering per-channel palettes)]]
** Plot
*** Common plot function
#+begin_src R :results output :session :exports both
plot_with_specific_palette <- function (palette)
{
    ggplot(dfm[dfm$database == "dc_TKY_y18_d" & dfm$metric == "Blue" & dfm$year == 2007,],
           aes(x = sequence, y = value, fill=as.factor(variable))) +
        geom_bar(stat='identity', width=1) +
        ylim(0,NA) +
        theme_bw(base_size=12) +
        scale_fill_manual(values=palette) +
        theme(legend.position="none") +
        xlab(NULL) + ylab(NULL) +
#        facet_grid (year~metric, scale="free") +
    theme(axis.title.x=element_blank(),
          axis.title.x=element_blank(),
          axis.text=element_blank(),
          axis.ticks=element_blank(),
          panel.grid=element_blank(),
          panel.border=element_blank());
}
#+end_src

#+RESULTS:
*** With original viridis blue palette
#+begin_src R :results output graphics :file img/blue-palette-original_drift_0.png :exports both :width 600 :height 400 :session
library(ggplot2);
paletteFilename = "palette/viridis-blue.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
plot_with_specific_palette (palette);
#+end_src

#+RESULTS:
[[file:img/blue-palette-original_drift_0.png]]
*** Upper and lower palette drift
#+begin_src R :results output :session :exports both
upper_drift <- function (palette, n)
{
    if (n == 0){
        palette;
    }else{
        first <- palette[1];
        palette <- c(rep(first, n), head(palette, -n))
        palette
    }
}
lower_drift <- function (palette, n)
{
    if (n == 0){
        palette;
    }else{
        last <- palette[length(palette)];
        palette <- c(tail(palette, -n), rep(last, n));
        palette;
    }
}
#+end_src

#+RESULTS:
*** Plotting with upper and lower palette drift
#+begin_src R :results output :session :exports both
v = 1:10
l1 <- lapply(rev(v), function(x) plot_with_specific_palette(lower_drift(palette, x)));
l2 <- lapply(0, function(x) plot_with_specific_palette(lower_drift(palette, x)));
l3 <- lapply(v, function(x) plot_with_specific_palette(upper_drift(palette, x)));
plots <- c(l1, l2, l3);
length(plots);
#+end_src

#+RESULTS:
: [1] 21

#+begin_src R :results output graphics :file img/blue-palette-original_lower_drift_1.png :exports both :width 600 :height 800 :session
library(gridExtra);
library(grid);
library(ggplot2);
do.call(grid.arrange, c(plots, list(ncol=2)));
#+end_src

#+RESULTS:
[[file:img/blue-palette-original_lower_drift_1.png]]

* 2016-10-13 Roger's palette (per channel)
** Creating the per-channel palette

#+begin_src sh :results output
cat palette/example100.palette | grep fffacd | uniq > /tmp/before
cat palette/example100.palette | grep -v -e ^? -e ^$ -e fffacd -e 00000 > /tmp/20colors
cat palette/example100.palette | grep 00000 | uniq > /tmp/after
#+end_src

#+RESULTS:

#+begin_src shell :results output
{
    for i in $(seq 1 19); do
      cat /tmp/before
    done
    cat /tmp/20colors
    for i in $(seq 61); do
      cat /tmp/after
    done
} > palette/example100-blue.palette

{
    for i in $(seq 1 30); do
      cat /tmp/before
    done
    cat /tmp/20colors
    for i in $(seq 50); do
      cat /tmp/after
    done
} > palette/example100-green.palette

{
    for i in $(seq 1 23); do
      cat /tmp/before
    done
    cat /tmp/20colors
    for i in $(seq 57); do
      cat /tmp/after
    done
} > palette/example100-red.palette
#+end_src

#+RESULTS:
** Read the data
Run the code here:
- [[*2016-10-13 Facet view for all databases (considering per-channel palettes)][2016-10-13 Facet view for all databases (considering per-channel palettes)]]
** Plot everything
#+begin_src R :results output :session :exports both
plot_three_metrics_sequence <- function (df, database, metric)
{
    library(ggplot2);
    paletteFilename = paste("palette/example100-", tolower(metric), ".palette", sep="");
    palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
    ggplot(df[df$database == database & df$metric == metric,],
           aes(x = sequence, y = value, fill=as.factor(variable))) +
        geom_bar(stat='identity', width=1) +
        ylim(0,NA) +
        theme_bw(base_size=24) +
        scale_fill_manual(values=palette) +
        theme(legend.position="none") +
        xlab(NULL) + ylab(NULL) +
        facet_grid (year~metric, scale="free") +
        theme(axis.title.x=element_blank(),
              axis.text=element_blank(),
              axis.ticks=element_blank(),
              panel.grid=element_blank());
}

base = "img/Roger_Palette_"
for (metric in unique(dfm$metric)){
    for (database in unique(dfm$database)){
        name = paste(database, metric, sep="_");
        name = paste(base, name, ".pdf", sep="");
        pdf(name, width = 32, height = 48);
        print(plot_three_metrics_sequence(dfm, database, metric));
        dev.off();
    }
}

#+end_src

#+RESULTS:
* 2017-11-30 Create one CPM as in PhenoVis                       :EPHENOLOGY:
** Reading the palette

#+begin_src R :results output :session :exports both
paletteFilename = "palette/example.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
palette
#+end_src

#+RESULTS:
:  [1] "#99540F" "#B26F2C" "#CC8E51" "#E5B17E" "#FFD8B2" "#6B990F" "#85B22C"
:  [8] "#A3CC51" "#C3E57E" "#E5FFB2" "#0F6B99" "#2C85B2" "#51A3CC" "#7EC3E5"
: [15] "#B2E5FF" "#260F99" "#422CB2" "#6551CC" "#8F7EE5" "#BFB2FF"

** Read the CSV

#+begin_src R :results output :session :exports both
suppressMessages(library(tidyverse));
df <- read_delim("experiments/dc_TKY_btp_n_grain100_masked.csv", delim=",");
dfm <- df %>% gather(variable, value, -database, -sequence, -year)
dfm$variable <- as.integer(substr(as.character(dfm$variable), 2, 100));
dfm;
#+end_src

#+RESULTS:
#+begin_example
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 2.2.1     ✔ purrr   0.2.4
✔ tibble  1.3.4     ✔ dplyr   0.7.4
✔ tidyr   0.7.2     ✔ stringr 1.2.0
✔ readr   1.1.1     ✔ forcats 0.2.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Parsed with column specification:
cols(
  .default = col_integer(),
  database = col_character(),
  sequence = col_character()
)
See spec(...) for full column specifications.
# A tibble: 392,000 x 5
       database sequence  year variable value
          <chr>    <chr> <int>    <int> <int>
 1 dc_TKY_btp_n      100  2005        0     0
 2 dc_TKY_btp_n      101  2005        0     0
 3 dc_TKY_btp_n      102  2005        0     0
 4 dc_TKY_btp_n      103  2005        0     0
 5 dc_TKY_btp_n      104  2005        0     0
 6 dc_TKY_btp_n      105  2005        0     0
 7 dc_TKY_btp_n      106  2005        0     0
 8 dc_TKY_btp_n      107  2005        0     0
 9 dc_TKY_btp_n      108  2005        0     0
10 dc_TKY_btp_n      109  2005        0     0
# ... with 391,990 more rows
#+end_example

** Let's do the plot for the 2007 year only

#+begin_src R :results output graphics :file img/cpm_2007_v2.pdf :exports both :width 12 :height 5 :session
lowLimit = 30;
highLimit = 50;
library(ggplot2);
dfm %>% 
    filter(year == 2007) %>%
    filter(variable >= lowLimit, variable < highLimit) %>%
    filter(value != 0) %>%
    ggplot(aes(x = sequence, y = value, fill=as.factor(variable))) +
    geom_bar(stat='identity', width=1) +
    ylim(0,NA) +
    theme_bw (base_size=21.5) +
    xlab("Day of the Year") +
    ylab("Normalized size of bins") +
    scale_fill_manual(values=palette) +
    theme(axis.ticks = element_blank(),
          axis.text = element_blank(),
          plot.margin = unit(c(0,0,0,0), "cm"),
          legend.spacing = unit(1, "mm"),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.justification = "left",
          legend.box.spacing = unit(0, "pt"),
          legend.box.margin = margin(0,0,0,0),
          legend.title = element_blank()) +
    guides(fill = guide_legend(nrow = 1))
#+end_src

#+RESULTS:
[[file:img/cpm_2007_v2.pdf]]

** Frontpage CPM

#+begin_src R :results output graphics :file img/cpm_2007_v2_frontpage.pdf :exports both :width 12 :height 1.2 :session
lowLimit = 30;
highLimit = 50;
library(ggplot2);
dfm %>% 
    filter(year == 2007) %>%
    filter(variable >= lowLimit, variable < highLimit) %>%
    filter(value != 0) %>%
    ggplot(aes(x = sequence, y = value, fill=as.factor(variable))) +
    geom_bar(stat='identity', width=1) +
    ylim(0,NA) +
    theme_bw (base_size=24) +
    xlab(NULL) +
    ylab(NULL) +
    scale_fill_manual(values=palette) +
    theme(axis.ticks = element_blank(),
          axis.text = element_blank(),
          plot.margin = unit(c(0,0,0,0), "cm"),
          legend.spacing = unit(0, "mm"),
          panel.grid = element_blank(),
          legend.position = "none",
          legend.justification = "left",
          legend.box.spacing = unit(0, "pt"),
          legend.box.margin = margin(0,0,0,0),
          legend.title = element_blank()) +
    guides(fill = guide_legend(nrow = 1))
#+end_src

#+RESULTS:
[[file:img/cpm_2007_v2_frontpage.pdf]]
** Example of the recent work (using facetting)

#+begin_src R :results output graphics :file img/cpm_v3_facet.pdf :exports both :width 12 :height 4 :session
lowLimit = 30;
highLimit = 50;
library(ggplot2);
dfm %>% 
    filter(variable >= lowLimit, variable < highLimit) %>%
    filter(value != 0) %>%
    ggplot(aes(x = sequence, y = value, fill=as.factor(variable))) +
    geom_bar(stat='identity', width=1) +
    ylim(0,NA) +
    theme_bw (base_size=21.5) +
    xlab("Day of the Year") +
    ylab("Normalized size of bins") +
    scale_fill_manual(values=palette) +
    theme(axis.ticks = element_blank(),
          axis.text = element_blank(),
          plot.margin = unit(c(0,0,0,0), "cm"),
          legend.spacing = unit(1, "mm"),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.justification = "left",
          legend.box.spacing = unit(0, "pt"),
          legend.box.margin = margin(0,0,0,0),
          legend.title = element_blank()) +
    guides(fill = guide_legend(nrow = 1)) +
    facet_wrap(~year, nrow=2)
#+end_src

#+RESULTS:
[[file:img/cpm_v3_facet.pdf]]

* 2017-12-07 Test the phenovisr package with the H metric
** Many images

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400
suppressMessages(library(tidyverse));
df.masks <- tibble(Mask.Filename=list.files(c("data/70", "data/d0"), recursive=TRUE, pattern="jpg", full.names=TRUE)) %>%
    separate(Mask.Filename, sep="/", into=c("A", "B", "C", "Mask"), remove=FALSE) %>%
    mutate(Mask = gsub(".jpg", "", Mask)) %>%
    mutate(Mask = gsub("-", "_", Mask)) %>%
    select(-A, -B, -C)

library(phenovisr);
paletteFilename = "palette/example.palette";
palette <- toupper(read.csv(paletteFilename, comment.char="?", header=FALSE)$V1);
suppressMessages(library(tidyverse));
df.peg <- tibble(Picture.Filename=list.files("Output_PEG", pattern="jpg", recursive=TRUE, full.names=TRUE)) %>%
    separate(Picture.Filename, sep="/", into=c("A", "B", "Picture"), remove=FALSE) %>% select(-A, -B) %>%
    mutate(Picture = gsub(".jpg", "", Picture))
suppressMessages(library(tidyverse));
library(phenovisr);

gethist <- function(df, grain=360)
{
    mask <- df %>% slice(1) %>% pull(Mask.Filename);
    phenovis_read_mask(mask);
    phenovis_get_histogram(phenovis_H(), df %>% pull(Picture.Filename), grain) %>%
        as_tibble()
}

df.masks %>% slice(1) %>%
    mutate(dummy=TRUE) %>%
    group_by(Mask) %>%
    left_join(df.peg %>% slice(1:200) %>% mutate(dummy=TRUE), by=c("dummy")) %>%   
    select(-dummy) %>%
    do(gethist(.)) %>%
    ungroup() %>%
    gather(variable, value, -Mask, -Name, -Width, -Height, -Pixels) %>%
    mutate(variable = as.integer(substr(as.character(variable), 2, 100))) %>%
    separate(Name, sep="/", into=c("Dir", "Year", "Filename")) %>%
    select(-Dir, -Year) %>%
    separate(Filename, sep="_", into=c("Year", "Day", "Hour", "Sequence"), convert=TRUE) %>%
    mutate(Sequence = gsub(".jpg", "", Sequence)) -> df;

lowLimit = 0;
highLimit = 360;

library(ggplot2);
df %>% 
    filter(variable >= lowLimit, variable < highLimit) %>%
    filter(value != 0) %>%
    filter(Hour == 12) %>% #>= 8, Hour <= 17) %>%
    filter(Sequence == 1) %>%
  #  filter(grepl("roi6?1", Mask)) %>%
    group_by(Mask) %>%
    mutate(value = value/Pixels) %>%
    ungroup() %>%
    ggplot(aes(x = Day, y = value, fill=as.factor(variable))) +
    geom_bar(stat='identity', width=1) +
    ylim(0,NA) +
    theme_bw (base_size=16) +
    xlab("Day of the Year (2014)") +
    ylab("Normalized size of bins") +
#    scale_fill_manual(values=palette) +
    theme(#axis.ticks = element_blank(),
          #axis.text = element_blank(),
          plot.margin = unit(c(0,0,0,0), "cm"),
          legend.spacing = unit(1, "mm"),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.justification = "left",
          legend.box.spacing = unit(0, "pt"),
          legend.box.margin = margin(0,0,0,0),
          legend.title = element_blank()) +
    guides(fill = guide_legend(nrow = 4)) +
    facet_grid(Hour~Mask, scales="free")
#+end_src

#+RESULTS:
[[file:/tmp/babel-31023Z-s/figure31023I4Q.png]]
** Single image (get double HSV histogram)

#+begin_src R :results output :exports both :session
library(phenovisr);
suppressMessages(library(tidyverse));
df.masks <- tibble(Mask.Filename=list.files(c("data/70", "data/d0"), recursive=TRUE, pattern="jpg", full.names=TRUE)) %>%
    separate(Mask.Filename, sep="/", into=c("A", "B", "C", "Mask"), remove=FALSE) %>%
    mutate(Mask = gsub(".jpg", "", Mask)) %>%
    mutate(Mask = gsub("-", "_", Mask)) %>%
    select(-A, -B, -C)


df.peg <- tibble(Picture.Filename=list.files("Output_PEG", pattern="jpg", recursive=TRUE, full.names=TRUE)) %>%
    separate(Picture.Filename, sep="/", into=c("A", "B", "Picture"), remove=FALSE) %>% select(-A, -B) %>%
    mutate(Picture = gsub(".jpg", "", Picture))

gethist <- function(df, grain=360)
{
    mask <- df %>% slice(1) %>% pull(Mask.Filename);
    phenovis_read_mask(mask);
    phenovis_get_HSV_double_histogram(phenovis_H(), df %>% pull(Picture.Filename), 10) %>%
        as_tibble()
}

df.masks %>% slice(1) %>%
    mutate(dummy=TRUE) %>%
    group_by(Mask) %>%
    left_join(df.peg %>% slice(1:100) %>% mutate(dummy=TRUE), by=c("dummy")) %>%   
    select(-dummy) %>%
    do(gethist(.)) %>%
    ungroup() -> dft;
dft
#+end_src

#+RESULTS:
#+begin_example
|======================================================|100% ~0 s remaining     > # A tibble: 36,000 x 17
             Mask                              Name Width Height Pixels     H
            <chr>                            <fctr> <int>  <int>  <int> <int>
 1 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     0
 2 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     1
 3 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     2
 4 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     3
 5 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     4
 6 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     5
 7 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     6
 8 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     7
 9 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     8
10 Comunidade_PEG Output_PEG/2014/2014_091_10_1.jpg  1280    960 508770     9
# ... with 35,990 more rows, and 11 more variables: Count <int>, V0 <int>,
#   V1 <int>, V2 <int>, V3 <int>, V4 <int>, V5 <int>, V6 <int>, V7 <int>,
#   V8 <int>, V9 <int>
#+end_example

#+begin_src R :results output :session :exports both
library(colorspace);
dft %>%
    gather(V, Value, -Mask, -Name, -Width, -Height, -Pixels, -H, -Count) %>%
    # Select the best V
    group_by(Mask, Name, Width, Height, Pixels, H) %>%
    arrange(-Value) %>%
    slice(1) %>%
    ungroup() %>%
    mutate(V=as.integer(gsub("V", "", V))/10) %>%
    mutate(V=1-V) %>%
    mutate(S=1) %>%
    mutate(Color = hex(HSV(H, S, V))) %>%

    # Name handling
    separate(Name, sep="/", into=c("Dir", "Year", "Filename")) %>%
    select(-Dir, -Year) %>%
    separate(Filename, sep="_", into=c("Year", "Day", "Hour", "Sequence"), convert=TRUE) %>%
    mutate(Sequence = gsub(".jpg", "", Sequence)) -> dft.2;

dft.2 %>%
    filter(Year == 2014,
           Day == 91,
           Hour == 10,
           Sequence == 1) %>%
    select(-Mask, -Year, -Day, -Hour, -Sequence) %>% as.data.frame()

#dft.2 %>%
#    filter(Pixels != 0) %>%
#    arrange(Day, Sequence, H) %>%
#    head %>% as.data.frame()
#+end_src

#+RESULTS:
#+begin_example
    Width Height Pixels   H  Count   V  Value S   Color
1    1280    960 508770   0 729544 1.0 726399 1 #FF0000
2    1280    960 508770   1      6 0.3      2 1 #4D0100
3    1280    960 508770   2    152 0.6     24 1 #990500
4    1280    960 508770   3    182 0.4     36 1 #660500
5    1280    960 508770   4    166 1.0     65 1 #FF1100
6    1280    960 508770   5    623 0.8    106 1 #CC1100
7    1280    960 508770   6    212 1.0    137 1 #FF1900
8    1280    960 508770   7    269 1.0    138 1 #FF1E00
9    1280    960 508770   8    292 1.0    157 1 #FF2200
10   1280    960 508770   9    801 0.7    155 1 #B31B00
11   1280    960 508770  10   1479 1.0    366 1 #FF2A00
12   1280    960 508770  11   1248 0.7    295 1 #B32100
13   1280    960 508770  12   1953 1.0    588 1 #FF3300
14   1280    960 508770  13    233 1.0    142 1 #FF3700
15   1280    960 508770  14    341 0.6     59 1 #992400
16   1280    960 508770  15   1251 1.0    514 1 #FF4000
17   1280    960 508770  16   1947 0.8    423 1 #CC3600
18   1280    960 508770  17    577 1.0    157 1 #FF4800
19   1280    960 508770  18    815 1.0    151 1 #FF4D00
20   1280    960 508770  19    826 0.6    163 1 #993000
21   1280    960 508770  20    852 1.0    610 1 #FF5500
22   1280    960 508770  21   2451 0.8    442 1 #CC4700
23   1280    960 508770  22   3166 0.8    622 1 #CC4B00
24   1280    960 508770  23    928 0.6    146 1 #993B00
25   1280    960 508770  24   1323 1.0    261 1 #FF6600
26   1280    960 508770  25   3204 0.8    767 1 #CC5500
27   1280    960 508770  26   5804 0.8   1156 1 #CC5800
28   1280    960 508770  27   1947 0.8    431 1 #CC5C00
29   1280    960 508770  28   2159 0.6    379 1 #994700
30   1280    960 508770  29   2081 0.7    352 1 #B35600
31   1280    960 508770  30   4314 1.0    689 1 #FF8000
32   1280    960 508770  31   1875 0.7    356 1 #B35C00
33   1280    960 508770  32   7004 0.8   1414 1 #CC6D00
34   1280    960 508770  33   2007 0.4    368 1 #663800
35   1280    960 508770  34   4067 0.6    731 1 #995700
36   1280    960 508770  35   3970 0.7    654 1 #B36800
37   1280    960 508770  36   1493 0.4    253 1 #663D00
38   1280    960 508770  37   9443 0.8   1747 1 #CC7E00
39   1280    960 508770  38   2575 0.5    429 1 #805100
40   1280    960 508770  39   4733 0.6    800 1 #996300
41   1280    960 508770  40   6277 1.0   1043 1 #FFAA00
42   1280    960 508770  41  10931 0.8   2209 1 #CC8B00
43   1280    960 508770  42   7145 0.8   1153 1 #CC8F00
44   1280    960 508770  43  12531 0.5   2281 1 #805B00
45   1280    960 508770  44   8806 0.8   1914 1 #CC9600
46   1280    960 508770  45   7612 0.8   1244 1 #CC9900
47   1280    960 508770  46   2755 0.4    656 1 #664E00
48   1280    960 508770  47  11361 0.5   2170 1 #806400
49   1280    960 508770  48  12506 0.6   1969 1 #997A00
50   1280    960 508770  49   6033 0.8    990 1 #CCA700
51   1280    960 508770  50   9876 0.7   1511 1 #B39500
52   1280    960 508770  51  22277 0.5   3781 1 #806C00
53   1280    960 508770  52  12794 0.6   2287 1 #998500
54   1280    960 508770  53   3468 0.4    778 1 #665A00
55   1280    960 508770  54   8441 0.5   1686 1 #807300
56   1280    960 508770  55   9970 0.5   2087 1 #807500
57   1280    960 508770  56   6195 0.6   1156 1 #998F00
58   1280    960 508770  57  13450 0.5   2817 1 #807900
59   1280    960 508770  58   5547 0.5   1152 1 #807B00
60   1280    960 508770  59      6 0.2      3 1 #333200
61   1280    960 508770  60  43632 0.1  10047 1 #191900
62   1280    960 508770  61   6682 0.4   1478 1 #646600
63   1280    960 508770  62    952 0.1    429 1 #191900
64   1280    960 508770  63  11665 0.6   2336 1 #919900
65   1280    960 508770  64   7785 0.5   1396 1 #778000
66   1280    960 508770  65  10334 0.6   2154 1 #8C9900
67   1280    960 508770  66   6114 0.5   1310 1 #738000
68   1280    960 508770  67   7064 0.8   1247 1 #B4CC00
69   1280    960 508770  68   9442 0.5   1846 1 #6F8000
70   1280    960 508770  69  15737 0.6   2896 1 #829900
71   1280    960 508770  70  14431 0.6   2535 1 #7F9900
72   1280    960 508770  71   2295 0.8    568 1 #A7CC00
73   1280    960 508770  72   4211 0.4    566 1 #526600
74   1280    960 508770  73   5201 0.5   1098 1 #648000
75   1280    960 508770  74   4112 0.6    994 1 #759900
76   1280    960 508770  75   2266 0.5    663 1 #608000
77   1280    960 508770  76   6212 0.6   1506 1 #709900
78   1280    960 508770  77   4299 0.6    864 1 #6E9900
79   1280    960 508770  78    745 0.5    130 1 #598000
80   1280    960 508770  79   1765 0.5    387 1 #578000
81   1280    960 508770  80   4866 0.6    901 1 #669900
82   1280    960 508770  81    230 0.1     80 1 #111900
83   1280    960 508770  82   1808 0.5    347 1 #518000
84   1280    960 508770  83   2726 0.5    498 1 #4F8000
85   1280    960 508770  84   2294 0.8    336 1 #7ACC00
86   1280    960 508770  85   5876 0.6   1074 1 #599900
87   1280    960 508770  86   1917 0.5    382 1 #488000
88   1280    960 508770  87    214 0.3     45 1 #2A4D00
89   1280    960 508770  88    801 0.5    167 1 #448000
90   1280    960 508770  89    789 0.6    181 1 #4F9900
91   1280    960 508770  90   2051 1.0    439 1 #80FF00
92   1280    960 508770  91    972 0.5    190 1 #3E8000
93   1280    960 508770  92   1351 0.4    275 1 #306600
94   1280    960 508770  93    177 0.4     37 1 #2E6600
95   1280    960 508770  94     86 0.1     44 1 #0B1900
96   1280    960 508770  95    949 0.6    187 1 #409900
97   1280    960 508770  96   2603 0.6    487 1 #3D9900
98   1280    960 508770  97     33 1.0     19 1 #62FF00
99   1280    960 508770  98    437 0.4     99 1 #256600
100  1280    960 508770  99    677 0.8    210 1 #47CC00
101  1280    960 508770 100   1629 1.0    326 1 #55FF00
102  1280    960 508770 101    452 0.5     92 1 #288000
103  1280    960 508770 102   1649 0.7    318 1 #36B300
104  1280    960 508770 103   1191 0.5    243 1 #248000
105  1280    960 508770 104     45 0.1     30 1 #071900
106  1280    960 508770 105    311 1.0    107 1 #40FF00
107  1280    960 508770 106     19 0.1     10 1 #061900
108  1280    960 508770 107    548 0.5    107 1 #1C8000
109  1280    960 508770 108     63 1.0     38 1 #33FF00
110  1280    960 508770 109    517 0.8    131 1 #25CC00
111  1280    960 508770 110   1059 0.7    208 1 #1EB300
112  1280    960 508770 111    247 0.5     40 1 #138000
113  1280    960 508770 112    817 0.7    154 1 #18B300
114  1280    960 508770 113     52 0.1     15 1 #031900
115  1280    960 508770 114    471 0.5     81 1 #0D8000
116  1280    960 508770 115     22 0.8      6 1 #11CC00
117  1280    960 508770 116    100 0.4     20 1 #076600
118  1280    960 508770 117     15 0.4      5 1 #056600
119  1280    960 508770 118      0 1.0      0 1 #09FF00
120  1280    960 508770 119      0 1.0      0 1 #04FF00
121  1280    960 508770 120   3157 1.0   2237 1 #00FF00
122  1280    960 508770 121      0 1.0      0 1 #00FF04
123  1280    960 508770 122      4 0.4      2 1 #006603
124  1280    960 508770 123     41 0.5      9 1 #008006
125  1280    960 508770 124     71 0.8     11 1 #00CC0E
126  1280    960 508770 125    309 0.4     72 1 #006609
127  1280    960 508770 126    138 0.9     29 1 #00E617
128  1280    960 508770 127      6 0.1      3 1 #001903
129  1280    960 508770 128      1 0.1      1 1 #001903
130  1280    960 508770 129     86 0.5     20 1 #008013
131  1280    960 508770 130     91 0.8     27 1 #00CC22
132  1280    960 508770 131    921 0.7    245 1 #00B321
133  1280    960 508770 132    634 0.8    149 1 #00CC29
134  1280    960 508770 133     78 0.6     15 1 #009921
135  1280    960 508770 134      8 0.1      7 1 #001906
136  1280    960 508770 135      2 0.1      2 1 #001906
137  1280    960 508770 136    154 0.5     29 1 #008022
138  1280    960 508770 137     19 0.1     13 1 #001907
139  1280    960 508770 138     74 0.5     17 1 #008026
140  1280    960 508770 139    254 0.7     64 1 #00B339
141  1280    960 508770 140    386 0.8     81 1 #00CC44
142  1280    960 508770 141      6 0.1      4 1 #001909
143  1280    960 508770 142     22 0.5      7 1 #00802F
144  1280    960 508770 143      1 0.1      1 1 #00190A
145  1280    960 508770 144     14 1.0      3 1 #00FF66
146  1280    960 508770 145      5 0.1      4 1 #00190B
147  1280    960 508770 146    291 0.6     52 1 #009942
148  1280    960 508770 147    176 0.5     34 1 #008039
149  1280    960 508770 148      0 1.0      0 1 #00FF77
150  1280    960 508770 149    330 0.8    125 1 #00CC63
151  1280    960 508770 150   1024 0.8    206 1 #00CC66
152  1280    960 508770 151      9 0.5      4 1 #008042
153  1280    960 508770 152     23 0.4      6 1 #006636
154  1280    960 508770 153      3 1.0      1 1 #00FF8C
155  1280    960 508770 154      5 1.0      3 1 #00FF91
156  1280    960 508770 155      3 0.1      3 1 #00190F
157  1280    960 508770 156      3 1.0      3 1 #00FF99
158  1280    960 508770 157      4 0.1      3 1 #001910
159  1280    960 508770 158    103 0.6     24 1 #009961
160  1280    960 508770 159    253 0.7     65 1 #00B374
161  1280    960 508770 160    545 0.8    123 1 #00CC88
162  1280    960 508770 161      3 0.5      1 1 #008057
163  1280    960 508770 162      6 0.1      6 1 #001912
164  1280    960 508770 163      1 0.1      1 1 #001912
165  1280    960 508770 164    231 0.8     85 1 #00CC96
166  1280    960 508770 165    691 0.8    136 1 #00CC99
167  1280    960 508770 166      0 1.0      0 1 #00FFC3
168  1280    960 508770 167      1 0.6      1 1 #009978
169  1280    960 508770 168     22 0.1      7 1 #001914
170  1280    960 508770 169     12 0.7      6 1 #00B392
171  1280    960 508770 170     22 0.5      6 1 #00806A
172  1280    960 508770 171      6 1.0      3 1 #00FFD9
173  1280    960 508770 172      0 1.0      0 1 #00FFDD
174  1280    960 508770 173    192 0.8     39 1 #00CCB4
175  1280    960 508770 174     70 0.4     14 1 #00665C
176  1280    960 508770 175      1 1.0      1 1 #00FFEA
177  1280    960 508770 176      6 0.5      2 1 #008077
178  1280    960 508770 177      1 0.4      1 1 #006661
179  1280    960 508770 178      0 1.0      0 1 #00FFF7
180  1280    960 508770 179      0 1.0      0 1 #00FFFB
181  1280    960 508770 180    845 0.1    366 1 #001919
182  1280    960 508770 181      0 1.0      0 1 #00FBFF
183  1280    960 508770 182      0 1.0      0 1 #00F7FF
184  1280    960 508770 183      1 0.1      1 1 #001819
185  1280    960 508770 184     13 0.5      3 1 #007780
186  1280    960 508770 185     57 0.7     12 1 #00A4B3
187  1280    960 508770 186      2 0.1      2 1 #001719
188  1280    960 508770 187      2 0.1      2 1 #001719
189  1280    960 508770 188      1 0.1      1 1 #001619
190  1280    960 508770 189     49 0.1     13 1 #001619
191  1280    960 508770 190     30 0.9      6 1 #00BFE6
192  1280    960 508770 191    420 0.8    107 1 #00A7CC
193  1280    960 508770 192    328 0.8     70 1 #00A3CC
194  1280    960 508770 193      6 0.1      5 1 #001419
195  1280    960 508770 194     14 0.1     14 1 #001419
196  1280    960 508770 195      8 1.0      5 1 #00BFFF
197  1280    960 508770 196    107 0.7     23 1 #0083B3
198  1280    960 508770 197      8 0.1      7 1 #001219
199  1280    960 508770 198      9 0.1      3 1 #001219
200  1280    960 508770 199     12 0.1     11 1 #001119
201  1280    960 508770 200     21 0.1     16 1 #001119
202  1280    960 508770 201     37 0.7      7 1 #0074B3
203  1280    960 508770 202    286 0.8     63 1 #0081CC
204  1280    960 508770 203     12 0.1      9 1 #001019
205  1280    960 508770 204     12 1.0      6 1 #0099FF
206  1280    960 508770 205    441 0.8    100 1 #0077CC
207  1280    960 508770 206    185 0.8     44 1 #0074CC
208  1280    960 508770 207     68 0.7     12 1 #0062B3
209  1280    960 508770 208      8 0.7      4 1 #005FB3
210  1280    960 508770 209     24 0.1     19 1 #000D19
211  1280    960 508770 210     79 1.0     42 1 #0080FF
212  1280    960 508770 211      2 0.5      1 1 #003E80
213  1280    960 508770 212    176 0.8     43 1 #005FCC
214  1280    960 508770 213      5 0.1      2 1 #000B19
215  1280    960 508770 214     22 0.1      9 1 #000B19
216  1280    960 508770 215     51 0.1     11 1 #000B19
217  1280    960 508770 216     19 1.0     17 1 #0066FF
218  1280    960 508770 217    276 0.8     52 1 #004ECC
219  1280    960 508770 218      4 0.8      2 1 #004BCC
220  1280    960 508770 219    247 0.8    121 1 #0047CC
221  1280    960 508770 220    710 0.8    124 1 #0044CC
222  1280    960 508770 221    198 0.7     52 1 #0039B3
223  1280    960 508770 222    134 1.0     23 1 #004CFF
224  1280    960 508770 223     48 0.7     11 1 #0033B3
225  1280    960 508770 224    146 0.7     33 1 #0030B3
226  1280    960 508770 225    132 1.0     41 1 #0040FF
227  1280    960 508770 226      3 1.0      3 1 #003CFF
228  1280    960 508770 227    156 0.8     50 1 #002CCC
229  1280    960 508770 228    485 0.8     90 1 #0029CC
230  1280    960 508770 229    108 0.8     35 1 #0025CC
231  1280    960 508770 230    327 0.6     60 1 #001999
232  1280    960 508770 231    159 0.6     27 1 #001799
233  1280    960 508770 232     93 0.7     14 1 #0018B3
234  1280    960 508770 233      8 1.0      5 1 #001EFF
235  1280    960 508770 234     24 1.0      4 1 #001AFF
236  1280    960 508770 235     20 0.3      4 1 #00064D
237  1280    960 508770 236     37 0.9      6 1 #000FE6
238  1280    960 508770 237     50 0.4      8 1 #000566
239  1280    960 508770 238     11 0.4      3 1 #000366
240  1280    960 508770 239      0 1.0      0 1 #0004FF
241  1280    960 508770 240   2091 1.0    544 1 #0000FF
242  1280    960 508770 241      9 0.8      2 1 #0300CC
243  1280    960 508770 242     15 0.9      9 1 #0800E6
244  1280    960 508770 243     98 0.8     18 1 #0A00CC
245  1280    960 508770 244    106 1.0     19 1 #1100FF
246  1280    960 508770 245     76 0.6     14 1 #0D0099
247  1280    960 508770 246     46 1.0     10 1 #1900FF
248  1280    960 508770 247    279 0.7     52 1 #1500B3
249  1280    960 508770 248    123 1.0     20 1 #2200FF
250  1280    960 508770 249    370 0.7     75 1 #1B00B3
251  1280    960 508770 250    415 0.8     71 1 #2200CC
252  1280    960 508770 251    337 0.7     79 1 #2100B3
253  1280    960 508770 252    350 1.0     92 1 #3300FF
254  1280    960 508770 253     62 0.4     11 1 #160066
255  1280    960 508770 254     48 0.6      9 1 #240099
256  1280    960 508770 255    102 1.0     48 1 #4000FF
257  1280    960 508770 256    205 0.8     40 1 #3600CC
258  1280    960 508770 257    127 0.7     24 1 #3300B3
259  1280    960 508770 258     23 1.0      5 1 #4C00FF
260  1280    960 508770 259     71 0.1     17 1 #080019
261  1280    960 508770 260    254 1.0     56 1 #5500FF
262  1280    960 508770 261     20 1.0     11 1 #5900FF
263  1280    960 508770 262     53 0.5     11 1 #2F0080
264  1280    960 508770 263    262 0.8     60 1 #4E00CC
265  1280    960 508770 264    354 1.0     87 1 #6600FF
266  1280    960 508770 265    470 0.8     82 1 #5500CC
267  1280    960 508770 266     85 1.0     24 1 #6F00FF
268  1280    960 508770 267     13 0.5      3 1 #390080
269  1280    960 508770 268     28 0.8      5 1 #5F00CC
270  1280    960 508770 269     36 0.1     11 1 #0C0019
271  1280    960 508770 270    212 1.0     74 1 #8000FF
272  1280    960 508770 271     56 0.8      8 1 #6900CC
273  1280    960 508770 272    101 1.0     12 1 #8800FF
274  1280    960 508770 273     19 1.0      6 1 #8C00FF
275  1280    960 508770 274     14 1.0      8 1 #9000FF
276  1280    960 508770 275     27 0.1      8 1 #0F0019
277  1280    960 508770 276    338 0.8     58 1 #7A00CC
278  1280    960 508770 277      4 1.0      4 1 #9D00FF
279  1280    960 508770 278     39 0.1      9 1 #100019
280  1280    960 508770 279    251 0.8     82 1 #8500CC
281  1280    960 508770 280    726 1.0    190 1 #AA00FF
282  1280    960 508770 281     45 1.0      8 1 #AE00FF
283  1280    960 508770 282    288 0.8     50 1 #8F00CC
284  1280    960 508770 283    164 0.8     24 1 #9200CC
285  1280    960 508770 284      2 1.0      1 1 #BB00FF
286  1280    960 508770 285     79 1.0     27 1 #BF00FF
287  1280    960 508770 286      7 1.0      5 1 #C300FF
288  1280    960 508770 287     78 0.8     14 1 #A000CC
289  1280    960 508770 288     31 1.0     19 1 #CC00FF
290  1280    960 508770 289     72 0.7     21 1 #9200B3
291  1280    960 508770 290    367 0.8     70 1 #AA00CC
292  1280    960 508770 291     57 1.0     13 1 #D900FF
293  1280    960 508770 292    162 0.8     40 1 #B100CC
294  1280    960 508770 293     11 1.0      3 1 #E100FF
295  1280    960 508770 294     69 0.8     13 1 #B800CC
296  1280    960 508770 295      8 0.1      5 1 #170019
297  1280    960 508770 296     35 0.1      8 1 #180019
298  1280    960 508770 297      5 0.5      2 1 #790080
299  1280    960 508770 298      0 1.0      0 1 #F700FF
300  1280    960 508770 299      0 1.0      0 1 #FB00FF
301  1280    960 508770 300   1622 0.1   1301 1 #190019
302  1280    960 508770 301      0 1.0      0 1 #FF00FB
303  1280    960 508770 302      1 0.3      1 1 #4D004A
304  1280    960 508770 303     18 0.6      4 1 #990091
305  1280    960 508770 304     37 0.5      8 1 #800077
306  1280    960 508770 305      9 0.1      3 1 #190017
307  1280    960 508770 306    119 0.9     19 1 #E600CF
308  1280    960 508770 307      7 1.0      5 1 #FF00E1
309  1280    960 508770 308     11 0.1      7 1 #190016
310  1280    960 508770 309     35 0.1      9 1 #190016
311  1280    960 508770 310     50 1.0     15 1 #FF00D4
312  1280    960 508770 311    426 0.8    103 1 #CC00A7
313  1280    960 508770 312    442 1.0    123 1 #FF00CC
314  1280    960 508770 313     64 1.0      9 1 #FF00C8
315  1280    960 508770 314      6 0.1      5 1 #190014
316  1280    960 508770 315     11 1.0     11 1 #FF00BF
317  1280    960 508770 316    103 0.8     17 1 #CC0096
318  1280    960 508770 317     26 0.1     11 1 #190012
319  1280    960 508770 318     89 0.8     15 1 #CC008F
320  1280    960 508770 319    136 0.7     37 1 #B3007A
321  1280    960 508770 320    367 1.0    101 1 #FF00AA
322  1280    960 508770 321      5 0.1      3 1 #190011
323  1280    960 508770 322     46 1.0      8 1 #FF00A2
324  1280    960 508770 323     21 0.1     21 1 #190010
325  1280    960 508770 324     42 1.0      7 1 #FF0099
326  1280    960 508770 325     28 1.0     12 1 #FF0095
327  1280    960 508770 326    250 0.7     48 1 #B30065
328  1280    960 508770 327    269 0.7     50 1 #B30062
329  1280    960 508770 328      4 0.1      3 1 #19000E
330  1280    960 508770 329    395 0.8    144 1 #CC0069
331  1280    960 508770 330   1150 1.0    309 1 #FF0080
332  1280    960 508770 331     32 0.3      6 1 #4D0025
333  1280    960 508770 332     52 0.7      8 1 #B30053
334  1280    960 508770 333     20 0.8      3 1 #CC005C
335  1280    960 508770 334     30 0.1      9 1 #19000B
336  1280    960 508770 335      9 0.1      9 1 #19000B
337  1280    960 508770 336     10 0.1      5 1 #19000A
338  1280    960 508770 337      8 0.1      5 1 #19000A
339  1280    960 508770 338    244 0.6     44 1 #990038
340  1280    960 508770 339    313 0.7     84 1 #B3003E
341  1280    960 508770 340   1022 0.8    211 1 #CC0044
342  1280    960 508770 341     34 0.5      6 1 #800028
343  1280    960 508770 342     19 1.0     17 1 #FF004C
344  1280    960 508770 343      5 0.1      4 1 #190007
345  1280    960 508770 344    249 0.8     79 1 #CC0036
346  1280    960 508770 345    872 1.0    196 1 #FF0040
347  1280    960 508770 346     10 1.0      6 1 #FF003C
348  1280    960 508770 347     47 0.4     13 1 #660016
349  1280    960 508770 348    210 0.7     32 1 #B30024
350  1280    960 508770 349     63 0.7     17 1 #B30021
351  1280    960 508770 350    166 0.8     28 1 #CC0022
352  1280    960 508770 351     43 0.1      9 1 #190004
353  1280    960 508770 352     28 0.1      9 1 #190003
354  1280    960 508770 353    633 0.8    119 1 #CC0018
355  1280    960 508770 354    355 0.8     63 1 #CC0014
356  1280    960 508770 355     15 0.4      3 1 #660008
357  1280    960 508770 356    111 0.6     23 1 #99000A
358  1280    960 508770 357     54 0.6      9 1 #990008
359  1280    960 508770 358      5 0.7      2 1 #B30006
360  1280    960 508770 359      0 1.0      0 1 #FF0004
#+end_example

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 400 :session
dft.2 %>% 
    filter(Hour == 12) %>%
    filter(Sequence == 1) %>%
  #  filter(grepl("roi6?1", Mask)) %>%
    group_by(Mask) %>%
    mutate(Value = Value/Pixels) %>%
    ungroup() %>%
    ggplot(aes(x = Day, y = Value, fill=as.factor(H))) +
    geom_bar(stat='identity', width=1) +
    ylim(0,NA) +
    theme_bw (base_size=16) +
    xlab("Day of the Year (2014)") +
    ylab("Normalized size of bins") +
    scale_fill_manual(values = dft.2$Color) +
    theme(#axis.ticks = element_blank(),
          #axis.text = element_blank(),
          plot.margin = unit(c(0,0,0,0), "cm"),
          legend.spacing = unit(1, "mm"),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.justification = "left",
          legend.box.spacing = unit(0, "pt"),
          legend.box.margin = margin(0,0,0,0),
          legend.title = element_blank()) +
    guides(fill = guide_legend(nrow = 4)) +
    facet_grid(Hour~Mask, scales="free")
#+end_src

#+RESULTS:
[[file:/tmp/babel-680mHx/figure6806MR.png]]


#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 1800 :height 100 :session
n = 10;
dft.2 %>%
    filter(H < n) %>%
    ggplot(aes(x=H, y=1, fill=Color)) +
    theme_bw() +
    geom_bar(stat='identity', width=1) +
    scale_fill_manual(values = dft.2 %>% filter(H < n) %>% pull(Color)) +
    theme(legend.position="none")
#+end_src

#+RESULTS:
[[file:/tmp/babel-680mHx/figure680sBE.png]]



#+begin_src R :results output :session :exports both :session
    ## gather(variable, value, -Mask, -Name, -Width, -Height, -Pixels) %>%
    ## mutate(variable = as.integer(substr(as.character(variable), 2, 100))) %>%
    ## separate(Name, sep="/", into=c("Dir", "Year", "Filename")) %>%
    ## select(-Dir, -Year) %>%
    ## separate(Filename, sep="_", into=c("Year", "Day", "Hour", "Sequence"), convert=TRUE) %>%
    ## mutate(Sequence = gsub(".jpg", "", Sequence)) -> df;

lowLimit = 0;
highLimit = 360;

library(ggplot2);
df %>% 
    filter(variable >= lowLimit, variable < highLimit) %>%
    filter(value != 0) %>%
    filter(Hour == 12) %>% #>= 8, Hour <= 17) %>%
    filter(Sequence == 1) %>%
  #  filter(grepl("roi6?1", Mask)) %>%
    group_by(Mask) %>%
    mutate(value = value/Pixels) %>%
    ungroup() %>%
    ggplot(aes(x = Day, y = value, fill=as.factor(variable))) +
    geom_bar(stat='identity', width=1) +
    ylim(0,NA) +
    theme_bw (base_size=16) +
    xlab("Day of the Year (2014)") +
    ylab("Normalized size of bins") +
#    scale_fill_manual(values=palette) +
    theme(#axis.ticks = element_blank(),
          #axis.text = element_blank(),
          plot.margin = unit(c(0,0,0,0), "cm"),
          legend.spacing = unit(1, "mm"),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.justification = "left",
          legend.box.spacing = unit(0, "pt"),
          legend.box.margin = margin(0,0,0,0),
          legend.title = element_blank()) +
    guides(fill = guide_legend(nrow = 4)) +
    facet_grid(Hour~Mask, scales="free")
#+end_src

#+RESULTS:
** New attemps
*** Pre-processing with double HSV

#+begin_src R :results output :exports both :session
library(phenovisr);
suppressMessages(library(tidyverse));
df.masks <- tibble(Mask.Filename=list.files(c("data/70", "data/d0"), recursive=TRUE, pattern="jpg", full.names=TRUE)) %>%
    separate(Mask.Filename, sep="/", into=c("A", "B", "C", "Mask"), remove=FALSE) %>%
    mutate(Mask = gsub(".jpg", "", Mask)) %>%
    mutate(Mask = gsub("-", "_", Mask)) %>%
    select(-A, -B, -C)


df.peg <- tibble(Picture.Filename=list.files("Output_PEG", pattern="jpg", recursive=TRUE, full.names=TRUE)) %>%
    separate(Picture.Filename, sep="/", into=c("A", "B", "Picture"), remove=FALSE) %>% select(-A, -B) %>%
    mutate(Picture = gsub(".jpg", "", Picture)) %>%
    separate(Picture, sep="_", into=c("Year", "Day", "Hour", "Sequence"), convert=TRUE)

gethist <- function(df, grain=360)
{
    mask <- df %>% slice(1) %>% pull(Mask.Filename);
    phenovis_read_mask(mask);
    phenovis_get_HSV_double_histogram(phenovis_H(), df %>% pull(Picture.Filename), 10) %>%
        as_tibble()
}

df.masks %>% #slice(1) %>%
    mutate(dummy=TRUE) %>%
    group_by(Mask) %>%
    left_join(df.peg %>% filter(Sequence == 1) %>% mutate(dummy=TRUE), by=c("dummy")) %>%   
    select(-dummy) %>%
    do(gethist(.)) %>%
    ungroup() -> dft;

# Convert Name
dft %>%
    separate(Name, sep="/", into=c("Dir", "Year", "Filename")) %>%
    select(-Dir, -Year) %>%
    separate(Filename, sep="_", into=c("Year", "Day", "Hour", "Sequence"), convert=TRUE) %>%
    mutate(Sequence = gsub(".jpg", "", Sequence)) -> dft.x;
#+end_src

*** Select the V with higher value for each H

#+begin_src R :results output :session :exports both
dft.x %>%
    gather(V, Value, -Mask, -Year, -Day, -Hour, -Sequence, -Width, -Height, -Pixels, -H, -Count) %>%
    # Select the best V
    group_by(Mask, Year, Day, Hour, Sequence, Width, Height, Pixels, H) %>%
    arrange(-Value) %>%
    slice(1) %>%
    ungroup() -> dft.2;
dft.2;
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 4,813,200 x 12
             Mask  Year   Day  Hour Sequence Width Height Pixels     H  Count
            <chr> <int> <int> <int>    <chr> <int>  <int>  <int> <int>  <int>
 1 Comunidade_PEG  2014    91    10        1  1280    960 508770     0 729544
 2 Comunidade_PEG  2014    91    10        1  1280    960 508770     1      6
 3 Comunidade_PEG  2014    91    10        1  1280    960 508770     2    152
 4 Comunidade_PEG  2014    91    10        1  1280    960 508770     3    182
 5 Comunidade_PEG  2014    91    10        1  1280    960 508770     4    166
 6 Comunidade_PEG  2014    91    10        1  1280    960 508770     5    623
 7 Comunidade_PEG  2014    91    10        1  1280    960 508770     6    212
 8 Comunidade_PEG  2014    91    10        1  1280    960 508770     7    269
 9 Comunidade_PEG  2014    91    10        1  1280    960 508770     8    292
10 Comunidade_PEG  2014    91    10        1  1280    960 508770     9    801
# ... with 4,813,190 more rows, and 2 more variables: V <chr>, Value <int>
#+end_example

*** Calculate the HSV hex color and color mapping

#+begin_src R :results output :session :exports both
library(colorspace);
dft.2 %>%
    mutate(V=as.integer(gsub("V", "", V))/10) %>%
    mutate(V=1) %>%
    mutate(S=1) %>%
    mutate(ColorKey = paste(H, S, V, sep="-")) %>%
    mutate(Color = hex(HSV(H, S, V))) -> dft.3;
dft.3 %>% select(H, S, V, ColorKey, Color) %>% unique

# Color mapping
dft.3 %>% select(ColorKey, Color) %>% unique -> df.palette;
palette <- df.palette$Color;
names(palette) <- df.palette$ColorKey;
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 360 x 5
       H     S     V ColorKey   Color
   <int> <dbl> <dbl>    <chr>   <chr>
 1     0     1     1    0-1-1 #FF0000
 2     1     1     1    1-1-1 #FF0400
 3     2     1     1    2-1-1 #FF0800
 4     3     1     1    3-1-1 #FF0D00
 5     4     1     1    4-1-1 #FF1100
 6     5     1     1    5-1-1 #FF1500
 7     6     1     1    6-1-1 #FF1900
 8     7     1     1    7-1-1 #FF1E00
 9     8     1     1    8-1-1 #FF2200
10     9     1     1    9-1-1 #FF2600
# ... with 350 more rows
#+end_example

*** Plot

#+begin_src R :results output graphics :file img/PEG_2014_H_V_v1.png :exports both :width 1400 :height 1200 :session
lowLimit = 0;
highLimit = 360;

library(ggplot2);
dft.3 %>%
    filter(H >= lowLimit, H < highLimit) %>%
    filter(H != 0) %>%
    filter(Hour >= 8, Hour <= 17) %>%
    filter(Sequence == 1) %>%
    group_by(Mask) %>%
    mutate(Count = Count/Pixels) %>%
    ungroup() %>%
    ggplot(aes(x = Day, y = Count, fill=as.factor(ColorKey))) +
    geom_bar(stat='identity', width=1) +
    ylim(0,NA) +
    theme_bw (base_size=16) +
    xlab("Day of the Year (2014)") +
    ylab("Normalized size of bins") +
    scale_fill_manual(values=palette) +
    theme(#axis.ticks = element_blank(),
          #axis.text = element_blank(),
          plot.margin = unit(c(0,0,0,0), "cm"),
          legend.spacing = unit(1, "mm"),
          panel.grid = element_blank(),
          legend.position = "none",
          legend.justification = "left",
          legend.box.spacing = unit(0, "pt"),
          legend.box.margin = margin(0,0,0,0),
          legend.title = element_blank()) +
    guides(fill = guide_legend(nrow = 4)) +
    facet_grid(Hour~Mask, scales="free")
#+end_src

#+RESULTS:
[[file:img/PEG_2014_H_V_v1.png]]

*** roi1 PEG only, 12H
#+begin_src R :results output graphics :file img/PEG_2014_H_V_roi1_12H.png :exports both :width 600 :height 600 :session
lowLimit = 0;
highLimit = 360;

library(ggplot2);
dft.3 %>%
    filter(H >= lowLimit, H < highLimit) %>%
    filter(H != 0) %>%
    filter(Day < 95) %>%
    filter(Hour == 12) %>%
    filter(grepl("roi1", Mask)) %>%
    filter(Sequence == 1) %>%
    mutate(Count = 1) %>%
#    group_by(Mask) %>%
 #   mutate(Count = Count/Pixels) %>%
 #   ungroup() %>%
    ggplot(aes(x = Day, y = Count, fill=as.factor(ColorKey))) +
    geom_bar(stat='identity', width=1) +
    ylim(0,NA) +
    theme_bw (base_size=16) +
    xlab("Day of the Year (2014)") +
    ylab("Normalized size of bins") +
    scale_fill_manual(values=palette) +
    theme(#axis.ticks = element_blank(),
          #axis.text = element_blank(),
          plot.margin = unit(c(0,0,0,0), "cm"),
          legend.spacing = unit(1, "mm"),
          panel.grid = element_blank(),
          legend.position = "none",
          legend.justification = "left",
          legend.box.spacing = unit(0, "pt"),
          legend.box.margin = margin(0,0,0,0),
          legend.title = element_blank()) +
    guides(fill = guide_legend(nrow = 4)) +
    facet_grid(Hour~Mask, scales="free")
#+end_src

#+RESULTS:
[[file:img/PEG_2014_H_V_roi1_12H.png]]
* 2019-02-07 Meeting with next steps

- Mathematical modeling with Jean-Marc; incorporate this work in your
  master would be useful to understand more clearly (in an abstract
  way) what is done in terms of data manipulation
- PEG (brazilian cerrado): GCC is too flat to be analyzed
  - Perhaps checking non-community masks would solve
  - Perhaps take a larger dataset by contacting Patricia/Bruna
- Review the TKY figures with the four "metrics"
  1. HSV, static S and static V
     - There is one histogram (for H)
     - Color in the CPM is given by H, S and V. The H component is defined by the H value itself. S and V are kept fixed in 1.
  2. HSV with mean histogram
     - There is one histogram (for H)
     - Color in the CPM is given by H, S and V. The H color is defined
       by the H value itself. The S and V color, on the other hand,
       are defined as the mean of S and mean of V using all pixels
       that fall in the corresponding H bin.
  3. HSV with mode histogram 
     - There is one histogram (for H, 360 bins) and two sub-histograms for each bin of H.
     - Color in the CPM is given by H, S and V. The H color is defined
       by the H-bin value itself. S and V values are classified into
       two other 10-bin histograms (for each H value), and the S and V
       values for the color are defined by the respective S and V bins
       with most observations, for each of the 360 H bins.
  4. GCC with mean color
     - There is one histogram (of the GCC value)
     - Color of one bin is dinamically defined by the mean RGB values
       of all pixels that fall in a given bin.
- Pre-processing (calculating these four metrics) is slow
  - Make it parallel, either using Hadoop/Spark or with
    parallel. The R parallel package might be easier to adapt to the
    current code; while Hadoop/Spark might envolve more learning for
    Alles.
  - Transform the pre-processing in a preliminary step (let's call
    it phase #1), with a checkpoint file that has all the metrics
    calculated. And then have a phase #2 to visualize those
    metrics. We can inspire ourselves based on the StarVZ method.
  - When installing Hadoop/Spark, you might want to use RStudio
    Server to make it easier the data ingestion in the worker nodes
  - Use the gppd-hpc cluster by installing either Hadoop/Spark or the
    R parallel package in there. See section 4.4
    (http://gppd-hpc.inf.ufrgs.br/#orga451822) of the parque
    documentation to learn how to make multi-partition reservations.
- Reproducibility: it is important to remember this for your master
  and paper because biologists are very concerned. The goal is to have
  a GIT companion for your work (either master and/or paper). A step
  forward has already been made by using a LabBook in the phenology
  repo and with the phenovisr package.  
- Related work: do an extended related work investigation to check for
  new advancements. This will be useful when writing and might enrich
  our metrics/methodology.

Conclusion
- The viz part has advanced very well, but we are facing a slow
  procedure that now must be tackled by making the framework more
  robust and parallel.

Next steps
1. Use more datasets (from the Japanese) using the four metrics
2. Refactor the code to make it in two phases (make it parallel also)
   - First phase is parallel
3. Write some text regarding the four metrics

Tentative schedule
- Try to finish a full document about this work (the tip of the
  iceberg) by May as a candidate submission for a journal (to be
  defined)
- Depending on the ambition (involves more experiments, perhaps
  thinking about new metrics, other kinds of further parallelization),
  attempt a second submission by September
- Write the text of the thesis from July forward

* 2019-03-14 Meeting with next steps (again)

Current situation and discussion
- Parallel one-node framework using the =parallel= package
  - For the TKY dataset, runtime decreases from 30s (seq) to 3s (par)
  - We think that it might be useful to rerun preliminary tests using
    linux drop caches, but we need root to do that
- Nothing has been written so far regarding the report
  - No related work investigation
- Reproducibility
  - There is now a DockerFile to make phenosvisr
  - [X] Lucas will send Guilherme the text of Boas Praticas from ERAD/RS 2019
- Current phase 1 computes only one metric, but four are need so that
  we can make exploratory analysis with ease
- The Hadoop/Spark has not been explored

Tips
- [ ] Use scratch, make a slurm script to copy from you home too all scratches
- [X] Verify R version in all machines, talk to Lucas if it is not the case
  - There were discrepancies, Nesi has fixed.

ORG templates
- https://github.com/schnorr/wileyorg
- https://github.com/schnorr/acmorg

Very important TODO
- Next meeting we shall see a full structure

* 2019-03-26 Meeting with next steps

Tasks for the next meeting (important)
- [X] Improve the structure following the discussions
- [X] Improve related work as discussed

From previous meetings
- [ ] Current phase 1 computes only one metric, but four are need so
  that we can make exploratory analysis with ease
- [X] We think that it might be useful to rerun preliminary tests
  using linux drop caches, but we need root to do that
  - Ongoing, e-mail has been sent to gt-cluster
  - [X] Drop caches is now available for Guilherme in the platform
- [ ] Use scratch, make a slurm script to copy from you home too all scratches

* 2019-04-04 Meeting

- [ ] Verify the accomplishment of previous (technical) tasks
- [ ] More data from PhenoCom
  - Teddy database (14 years)
    - First batch: 2002-08-20 - 2008-12-31
    - Second batch: 2009-01-01 - 2013-12-31
    - Third batch: 2014-01-01 - 2015-12-31
    - Fourth batch: 2016-01-01 - 2018-12-31
    - Fifth batch: 2019-01-01 - 2019-03-27

#+begin_src R :results table :session :exports both :colnames yes
library(lubridate)
library(tidyverse)

inicio <- ymd("2009-01-01")
fim <- ymd("2019-03-27")

tibble(Inicio = seq(inicio, fim, by = '12 months')) %>%
    mutate(Fim = Inicio + months(12) - days(1))
#+end_src

#+RESULTS:
|     Inicio |        Fim | Okay |
|------------+------------+------|
| 2009-01-01 | 2009-12-31 | TRUE |
| 2010-01-01 | 2010-12-31 | TRUE |
| 2011-01-01 | 2011-12-31 | TRUE |
| 2012-01-01 | 2012-12-31 | TRUE |
| 2013-01-01 | 2013-12-31 | TRUE |
| 2014-01-01 | 2014-12-31 | TRUE |
| 2015-01-01 | 2015-12-31 | TRUE |
| 2016-01-01 | 2016-12-31 | TRUE |
| 2017-01-01 | 2017-12-31 | TRUE |
| 2018-01-01 | 2018-12-31 | TRUE |
| 2019-01-01 | 2019-12-31 | TRUE |

* 2019-04-23 Meeting

Things that has been done
- [X] _Preparing_ performance experiments in hype
  - Waiting for cleareance of the queue
- [X] Current phase 1 computes only one metric, but four are need so
  that we can make exploratory analysis with ease

Still TODO:
- [ ] Use scratch, make a slurm script to copy from you home too all scratches
- [ ] Gzip the checkpoing between two phases
  - Use the =readr= package with ~write_csv~ and ~read_csv~
  - ~fread~ from the data.table package is even faster
- [ ] Create slurm script to more data from PhenoCom
  - Teddy database (14 years)
    - First batch: 2002-08-20 - 2008-12-31
    - Second batch: 2009-01-01 - 2013-12-31
    - Third batch: 2014-01-01 - 2015-12-31
    - Fourth batch: 2016-01-01 - 2018-12-31
    - Fifth batch: 2019-01-01 - 2019-03-27
  - [ ] Problem: resolution is different from year to year

Paper
- [ ] write the paper, take one paragraph at a time
- [ ] draw some preliminary images that occupy half a page

Time on the lab
- Tuesdays and Thursdays, until 11:30

Journal candidates for submissions
- FGCS
- Some other depending on visualization contribution
- Some other on phenology analysis

Viz ideas
- Think about the technical and semantic challenges to design a
  "Circular CPM" as in https://www.flickr.com/photos/stevefaeembra/5349017221/in/photostream/
- Make a long rectangle with a different ratio to improve CPM viz
  - Vertically, there are facets per year

Tentative schedule for master
| Item | Time      | What                                                                 |
|------+-----------+----------------------------------------------------------------------|
| A    | May 14th  | All paper expect results is written                                  |
| B    | June 11th | Paper is finished with results                                       |
| C    | July 16th | Mathematical model is implemented in Workflow/PhenoVis + Experiments |

If (C works)
| Item | Time          | What                 |
|------+---------------+----------------------|
| C.1  | August 16th   | New paper script     |
| C.2  | September 1st | Paper written        |
| D    | October       | Dissertation writing |
| E    | November      | Defense              |

If (C does not work)
| Item | Time        | What                                              |
|------+-------------+---------------------------------------------------|
| D    | August 16th | Preliminary deadline for writing the dissertation |
| E    | October     | Defense                                           |

Next meeting
- 30/04 at 9AM

* 2019-04-30 Meeting

Work
- [X] Use scratch, make a slurm script to copy from you home too all scratches
  - TKY, 2006 to 2012
- [1/3] Gzip the checkpoing between two phases
  - [ ] Use the =readr= package with ~write_csv~ and ~read_csv~
  - [ ] ~fread~ from the data.table package is even faster
  - [X] _Update_: There is a problem with ~write_csv~ regarding column names
- [ ] Create Histogram for Teddy.
  - Create slurm script to more data from PhenoCam
  - Teddy database (14 years)
    - First batch: 2002-08-20 - 2008-12-31
    - Second batch: 2009-01-01 - 2013-12-31
    - Third batch: 2014-01-01 - 2015-12-31
    - Fourth batch: 2016-01-01 - 2018-12-31
    - Fifth batch: 2019-01-01 - 2019-03-27
  - [ ] Problem: resolution is different from year to year

Paper
- [ ] write the paper, take one paragraph at a time
- [X] draw some preliminary images that occupy half a page


Todo
- [ ] Obtain performance metrics from current experiments
- [ ] Text
  - [ ] Review introduction, make a final version so Lucas can review
  - [ ] Finish background and related work
    - [ ] We can discuss in the next meeting
  - [ ] Write the rest of the paper (at least until proposal)
- [ ] Perhaps try to use another dataset (Teddy, remember?)
  - [ ] Try many others, why not?

* 2019-05-07 Meeting

Todo
- [X] Obtain performance metrics from current experiments
- [-] Text
  - [X] Review introduction, make a final version so Lucas can review
  - [X] Discuss Background/Related work
  - [ ] Write the rest of the paper (at least until proposal)
- [-] Perhaps try to use another dataset
  - [X] (Teddy, remember?)
  - [ ] Try many others, why not?

New Todo
- [ ] Perf. Analysis (perhaps do more experiments to enrich the analysis)
- [X] Finish background and related work

* 2019-05-14 Meeting

for Lucas
- [ ] Review Background and Related Work
- [X] Reworked some figures of Section 4

for Guilherme
- [ ] Write the rest of the paper
- [ ] Perf. Analysis (perhaps do more experiments to enrich the analysis)

* 2019-05-23 Meeting

for Lucas
- [ ] Review Background and Related Work
- [X] Reworked some figures of Section 4

for Guilherme
- [ ] Write the rest of the paper
- [ ] Perf. Analysis (perhaps do more experiments to enrich the analysis)
- [ ] Detail the intervals shown in the GCC CPM plot
- [ ] Add more technical details in the experimental testbed descriprion




